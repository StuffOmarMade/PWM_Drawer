
PWM_Drawer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f1e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000206  00800060  00000f1e  00000fb2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800266  00800266  000011b8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000011b8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000011e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000208  00000000  00000000  00001224  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a99  00000000  00000000  0000142c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a86  00000000  00000000  00002ec5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f14  00000000  00000000  0000394b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000468  00000000  00000000  00004860  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b22  00000000  00000000  00004cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f94  00000000  00000000  000057ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000198  00000000  00000000  0000677e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_6>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	12 e0       	ldi	r17, 0x02	; 2
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e1       	ldi	r30, 0x1E	; 30
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	22 e0       	ldi	r18, 0x02	; 2
  78:	a6 e6       	ldi	r26, 0x66	; 102
  7a:	b2 e0       	ldi	r27, 0x02	; 2
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 36       	cpi	r26, 0x6E	; 110
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ac 03 	call	0x758	; 0x758 <main>
  8a:	0c 94 8d 07 	jmp	0xf1a	; 0xf1a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_6>:
uint16_t loc_u16_prescaler = 1;

bool done = false;

ISR(TIMER1_CAPT_vect)
{
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	2f 93       	push	r18
  9e:	3f 93       	push	r19
  a0:	4f 93       	push	r20
  a2:	5f 93       	push	r21
  a4:	6f 93       	push	r22
  a6:	7f 93       	push	r23
  a8:	8f 93       	push	r24
  aa:	9f 93       	push	r25
  ac:	af 93       	push	r26
  ae:	bf 93       	push	r27
  b0:	ef 93       	push	r30
  b2:	ff 93       	push	r31
	static uint8_t loc_u16_counter = 0;
	
	loc_u16_counter++;
  b4:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <__data_end>
  b8:	8f 5f       	subi	r24, 0xFF	; 255
  ba:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <__data_end>
	
	if (loc_u16_counter == 1)
  be:	81 30       	cpi	r24, 0x01	; 1
  c0:	59 f4       	brne	.+22     	; 0xd8 <__vector_6+0x46>
	{
		GIE_void_Disable();
  c2:	0e 94 b5 04 	call	0x96a	; 0x96a <GIE_void_Disable>
		u16_init_val = TIMER1_u16_Get_ICR1();
  c6:	0e 94 08 05 	call	0xa10	; 0xa10 <TIMER1_u16_Get_ICR1>
  ca:	90 93 6d 02 	sts	0x026D, r25	; 0x80026d <u16_init_val+0x1>
  ce:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <u16_init_val>
		GIE_void_Enable();
  d2:	0e 94 b1 04 	call	0x962	; 0x962 <GIE_void_Enable>
  d6:	3d c0       	rjmp	.+122    	; 0x152 <__vector_6+0xc0>
	}
	else if(loc_u16_counter == 2)
  d8:	82 30       	cpi	r24, 0x02	; 2
  da:	71 f4       	brne	.+28     	; 0xf8 <__vector_6+0x66>
	{
		GIE_void_Disable();
  dc:	0e 94 b5 04 	call	0x96a	; 0x96a <GIE_void_Disable>
		u16_period_ticks = TIMER1_u16_Get_ICR1();
  e0:	0e 94 08 05 	call	0xa10	; 0xa10 <TIMER1_u16_Get_ICR1>
  e4:	90 93 6b 02 	sts	0x026B, r25	; 0x80026b <u16_period_ticks+0x1>
  e8:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <u16_period_ticks>
		GIE_void_Enable();
  ec:	0e 94 b1 04 	call	0x962	; 0x962 <GIE_void_Enable>
		
		TIMER1_void_ICU_Edge_Select(FALLING_EDGE);
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <TIMER1_void_ICU_Edge_Select>
  f6:	2d c0       	rjmp	.+90     	; 0x152 <__vector_6+0xc0>
	}
	else if(loc_u16_counter == 3)
  f8:	83 30       	cpi	r24, 0x03	; 3
  fa:	59 f5       	brne	.+86     	; 0x152 <__vector_6+0xc0>
	{
		GIE_void_Disable();
  fc:	0e 94 b5 04 	call	0x96a	; 0x96a <GIE_void_Disable>
		u16_on_ticks = TIMER1_u16_Get_ICR1();
 100:	0e 94 08 05 	call	0xa10	; 0xa10 <TIMER1_u16_Get_ICR1>
 104:	90 93 69 02 	sts	0x0269, r25	; 0x800269 <u16_on_ticks+0x1>
 108:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <u16_on_ticks>
		
		//TIMER1_void_ICU_Edge_Select(RISING_EDGE);
		//loc_u16_counter = 0;
		//TCNT1 = 0;
		
		done = true;
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	80 93 67 02 	sts	0x0267, r24	; 0x800267 <done>
		
		TIMER0_void_Stop();
 112:	0e 94 c8 04 	call	0x990	; 0x990 <TIMER0_void_Stop>
		TIMER1_void_Stop();
 116:	0e 94 0f 05 	call	0xa1e	; 0xa1e <TIMER1_void_Stop>
		
		
		u16_on_ticks = u16_on_ticks - u16_period_ticks;
 11a:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <u16_on_ticks>
 11e:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <u16_on_ticks+0x1>
 122:	20 91 6a 02 	lds	r18, 0x026A	; 0x80026a <u16_period_ticks>
 126:	30 91 6b 02 	lds	r19, 0x026B	; 0x80026b <u16_period_ticks+0x1>
 12a:	82 1b       	sub	r24, r18
 12c:	93 0b       	sbc	r25, r19
 12e:	90 93 69 02 	sts	0x0269, r25	; 0x800269 <u16_on_ticks+0x1>
 132:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <u16_on_ticks>
		u16_period_ticks = u16_period_ticks - u16_init_val;
 136:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <u16_period_ticks>
 13a:	90 91 6b 02 	lds	r25, 0x026B	; 0x80026b <u16_period_ticks+0x1>
 13e:	20 91 6c 02 	lds	r18, 0x026C	; 0x80026c <u16_init_val>
 142:	30 91 6d 02 	lds	r19, 0x026D	; 0x80026d <u16_init_val+0x1>
 146:	82 1b       	sub	r24, r18
 148:	93 0b       	sbc	r25, r19
 14a:	90 93 6b 02 	sts	0x026B, r25	; 0x80026b <u16_period_ticks+0x1>
 14e:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <u16_period_ticks>
		
		
		//GIE_void_Disable();
	}
}
 152:	ff 91       	pop	r31
 154:	ef 91       	pop	r30
 156:	bf 91       	pop	r27
 158:	af 91       	pop	r26
 15a:	9f 91       	pop	r25
 15c:	8f 91       	pop	r24
 15e:	7f 91       	pop	r23
 160:	6f 91       	pop	r22
 162:	5f 91       	pop	r21
 164:	4f 91       	pop	r20
 166:	3f 91       	pop	r19
 168:	2f 91       	pop	r18
 16a:	0f 90       	pop	r0
 16c:	0f be       	out	0x3f, r0	; 63
 16e:	0f 90       	pop	r0
 170:	1f 90       	pop	r1
 172:	18 95       	reti

00000174 <PWM_DRAWER_Draw>:
	
	GIE_void_Enable();
}

void PWM_DRAWER_Draw()
{
 174:	4f 92       	push	r4
 176:	5f 92       	push	r5
 178:	6f 92       	push	r6
 17a:	7f 92       	push	r7
 17c:	8f 92       	push	r8
 17e:	9f 92       	push	r9
 180:	af 92       	push	r10
 182:	bf 92       	push	r11
 184:	cf 92       	push	r12
 186:	df 92       	push	r13
 188:	ef 92       	push	r14
 18a:	ff 92       	push	r15
 18c:	0f 93       	push	r16
 18e:	1f 93       	push	r17
 190:	cf 93       	push	r28
 192:	df 93       	push	r29
 194:	00 d0       	rcall	.+0      	; 0x196 <PWM_DRAWER_Draw+0x22>
 196:	00 d0       	rcall	.+0      	; 0x198 <PWM_DRAWER_Draw+0x24>
 198:	cd b7       	in	r28, 0x3d	; 61
 19a:	de b7       	in	r29, 0x3e	; 62
	if(done)
 19c:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <done>
 1a0:	88 23       	and	r24, r24
 1a2:	09 f4       	brne	.+2      	; 0x1a6 <PWM_DRAWER_Draw+0x32>
 1a4:	1a c1       	rjmp	.+564    	; 0x3da <PWM_DRAWER_Draw+0x266>
	{
		float32_t loc_f32_pulse_width_ratio = ((float32_t) u16_on_ticks / u16_period_ticks);
 1a6:	60 91 68 02 	lds	r22, 0x0268	; 0x800268 <u16_on_ticks>
 1aa:	70 91 69 02 	lds	r23, 0x0269	; 0x800269 <u16_on_ticks+0x1>
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	0e 94 2d 06 	call	0xc5a	; 0xc5a <__floatunsisf>
 1b6:	6b 01       	movw	r12, r22
 1b8:	7c 01       	movw	r14, r24
 1ba:	60 91 6a 02 	lds	r22, 0x026A	; 0x80026a <u16_period_ticks>
 1be:	70 91 6b 02 	lds	r23, 0x026B	; 0x80026b <u16_period_ticks+0x1>
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	0e 94 2d 06 	call	0xc5a	; 0xc5a <__floatunsisf>
 1ca:	9b 01       	movw	r18, r22
 1cc:	ac 01       	movw	r20, r24
 1ce:	c7 01       	movw	r24, r14
 1d0:	b6 01       	movw	r22, r12
 1d2:	0e 94 85 05 	call	0xb0a	; 0xb0a <__divsf3>
 1d6:	2b 01       	movw	r4, r22
 1d8:	3c 01       	movw	r6, r24
		
		float32_t loc_f32_frequency = 1 / ((u16_period_ticks) * ((float32_t) loc_u16_prescaler / F_CPU));
 1da:	20 91 6a 02 	lds	r18, 0x026A	; 0x80026a <u16_period_ticks>
 1de:	30 91 6b 02 	lds	r19, 0x026B	; 0x80026b <u16_period_ticks+0x1>
 1e2:	3a 83       	std	Y+2, r19	; 0x02
 1e4:	29 83       	std	Y+1, r18	; 0x01
 1e6:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1ea:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	0e 94 2d 06 	call	0xc5a	; 0xc5a <__floatunsisf>
 1f6:	20 e0       	ldi	r18, 0x00	; 0
 1f8:	34 e2       	ldi	r19, 0x24	; 36
 1fa:	44 e7       	ldi	r20, 0x74	; 116
 1fc:	5b e4       	ldi	r21, 0x4B	; 75
 1fe:	0e 94 85 05 	call	0xb0a	; 0xb0a <__divsf3>
 202:	6b 01       	movw	r12, r22
 204:	7c 01       	movw	r14, r24
 206:	29 81       	ldd	r18, Y+1	; 0x01
 208:	3a 81       	ldd	r19, Y+2	; 0x02
 20a:	b9 01       	movw	r22, r18
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	0e 94 2d 06 	call	0xc5a	; 0xc5a <__floatunsisf>
 214:	a7 01       	movw	r20, r14
 216:	96 01       	movw	r18, r12
 218:	0e 94 df 06 	call	0xdbe	; 0xdbe <__mulsf3>
 21c:	9b 01       	movw	r18, r22
 21e:	ac 01       	movw	r20, r24
 220:	60 e0       	ldi	r22, 0x00	; 0
 222:	70 e0       	ldi	r23, 0x00	; 0
 224:	80 e8       	ldi	r24, 0x80	; 128
 226:	9f e3       	ldi	r25, 0x3F	; 63
 228:	0e 94 85 05 	call	0xb0a	; 0xb0a <__divsf3>
 22c:	4b 01       	movw	r8, r22
 22e:	5c 01       	movw	r10, r24
		float32_t loc_f32_time = (u16_period_ticks) * ((float32_t) loc_u16_prescaler / F_CPU) * 1000;
 230:	60 91 6a 02 	lds	r22, 0x026A	; 0x80026a <u16_period_ticks>
 234:	70 91 6b 02 	lds	r23, 0x026B	; 0x80026b <u16_period_ticks+0x1>
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	0e 94 2d 06 	call	0xc5a	; 0xc5a <__floatunsisf>
 240:	a7 01       	movw	r20, r14
 242:	96 01       	movw	r18, r12
 244:	0e 94 df 06 	call	0xdbe	; 0xdbe <__mulsf3>
 248:	20 e0       	ldi	r18, 0x00	; 0
 24a:	30 e0       	ldi	r19, 0x00	; 0
 24c:	4a e7       	ldi	r20, 0x7A	; 122
 24e:	54 e4       	ldi	r21, 0x44	; 68
 250:	0e 94 df 06 	call	0xdbe	; 0xdbe <__mulsf3>
 254:	6b 01       	movw	r12, r22
 256:	7c 01       	movw	r14, r24
		float32_t loc_f32_duty = (loc_f32_pulse_width_ratio) * 100;
 258:	20 e0       	ldi	r18, 0x00	; 0
 25a:	30 e0       	ldi	r19, 0x00	; 0
 25c:	48 ec       	ldi	r20, 0xC8	; 200
 25e:	52 e4       	ldi	r21, 0x42	; 66
 260:	c3 01       	movw	r24, r6
 262:	b2 01       	movw	r22, r4
 264:	0e 94 df 06 	call	0xdbe	; 0xdbe <__mulsf3>
 268:	69 83       	std	Y+1, r22	; 0x01
 26a:	7a 83       	std	Y+2, r23	; 0x02
 26c:	8b 83       	std	Y+3, r24	; 0x03
 26e:	9c 83       	std	Y+4, r25	; 0x04
		
		GLCD_void_Select_Page(PAGE_0);
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	0e 94 c4 02 	call	0x588	; 0x588 <GLCD_void_Select_Page>
		GLCD_void_Set_Line(LINE_0);
 276:	80 e0       	ldi	r24, 0x00	; 0
 278:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <GLCD_void_Set_Line>
		GLCD_void_Set_Cursor_Position(CURSOR_POSITION_0);
 27c:	80 e0       	ldi	r24, 0x00	; 0
 27e:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <GLCD_void_Set_Cursor_Position>
		GLCD_void_Display_String("Freq: ");
 282:	8f e4       	ldi	r24, 0x4F	; 79
 284:	92 e0       	ldi	r25, 0x02	; 2
 286:	0e 94 1c 03 	call	0x638	; 0x638 <GLCD_void_Display_String>
		GLCD_void_Display_Floating_Point(loc_f32_frequency);
 28a:	c5 01       	movw	r24, r10
 28c:	b4 01       	movw	r22, r8
 28e:	0e 94 66 03 	call	0x6cc	; 0x6cc <GLCD_void_Display_Floating_Point>
		
		GLCD_void_Select_Page(PAGE_0);
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	0e 94 c4 02 	call	0x588	; 0x588 <GLCD_void_Select_Page>
		GLCD_void_Set_Line(LINE_1);
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <GLCD_void_Set_Line>
		GLCD_void_Set_Cursor_Position(CURSOR_POSITION_0);
 29e:	80 e0       	ldi	r24, 0x00	; 0
 2a0:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <GLCD_void_Set_Cursor_Position>
		GLCD_void_Display_String("TIME: ");
 2a4:	86 e5       	ldi	r24, 0x56	; 86
 2a6:	92 e0       	ldi	r25, 0x02	; 2
 2a8:	0e 94 1c 03 	call	0x638	; 0x638 <GLCD_void_Display_String>
		GLCD_void_Display_Floating_Point(loc_f32_time);
 2ac:	c7 01       	movw	r24, r14
 2ae:	b6 01       	movw	r22, r12
 2b0:	0e 94 66 03 	call	0x6cc	; 0x6cc <GLCD_void_Display_Floating_Point>
		
		GLCD_void_Select_Page(PAGE_0);
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	0e 94 c4 02 	call	0x588	; 0x588 <GLCD_void_Select_Page>
		GLCD_void_Set_Line(LINE_2);
 2ba:	82 e0       	ldi	r24, 0x02	; 2
 2bc:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <GLCD_void_Set_Line>
		GLCD_void_Set_Cursor_Position(CURSOR_POSITION_0);
 2c0:	80 e0       	ldi	r24, 0x00	; 0
 2c2:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <GLCD_void_Set_Cursor_Position>
		GLCD_void_Display_String("Duty: ");
 2c6:	8d e5       	ldi	r24, 0x5D	; 93
 2c8:	92 e0       	ldi	r25, 0x02	; 2
 2ca:	0e 94 1c 03 	call	0x638	; 0x638 <GLCD_void_Display_String>
		GLCD_void_Display_Floating_Point(loc_f32_duty);
 2ce:	69 81       	ldd	r22, Y+1	; 0x01
 2d0:	7a 81       	ldd	r23, Y+2	; 0x02
 2d2:	8b 81       	ldd	r24, Y+3	; 0x03
 2d4:	9c 81       	ldd	r25, Y+4	; 0x04
 2d6:	0e 94 66 03 	call	0x6cc	; 0x6cc <GLCD_void_Display_Floating_Point>
		GLCD_void_Display_String("%");
 2da:	84 e6       	ldi	r24, 0x64	; 100
 2dc:	92 e0       	ldi	r25, 0x02	; 2
 2de:	0e 94 1c 03 	call	0x638	; 0x638 <GLCD_void_Display_String>
		
		
		GLCD_void_Set_Line(LINE_6);
 2e2:	86 e0       	ldi	r24, 0x06	; 6
 2e4:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <GLCD_void_Set_Line>
		GLCD_void_Set_Cursor_Position(CURSOR_POSITION_0);
 2e8:	80 e0       	ldi	r24, 0x00	; 0
 2ea:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <GLCD_void_Set_Cursor_Position>
		
		for (int j = 0; j < MAX_WIDTH;)
 2ee:	1a 82       	std	Y+2, r1	; 0x02
 2f0:	19 82       	std	Y+1, r1	; 0x01
 2f2:	6d c0       	rjmp	.+218    	; 0x3ce <PWM_DRAWER_Draw+0x25a>
		{
			if(j >= PAGE_WIDTH)
 2f4:	89 81       	ldd	r24, Y+1	; 0x01
 2f6:	9a 81       	ldd	r25, Y+2	; 0x02
 2f8:	80 34       	cpi	r24, 0x40	; 64
 2fa:	91 05       	cpc	r25, r1
 2fc:	4c f0       	brlt	.+18     	; 0x310 <PWM_DRAWER_Draw+0x19c>
			{
				GLCD_void_Select_Page(PAGE_1);
 2fe:	82 e0       	ldi	r24, 0x02	; 2
 300:	0e 94 c4 02 	call	0x588	; 0x588 <GLCD_void_Select_Page>
				GLCD_void_Set_Line(LINE_6);
 304:	86 e0       	ldi	r24, 0x06	; 6
 306:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <GLCD_void_Set_Line>
				GLCD_void_Set_Cursor_Position(CURSOR_POSITION_0);
 30a:	80 e0       	ldi	r24, 0x00	; 0
 30c:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <GLCD_void_Set_Cursor_Position>
			}
			
			GLCD_void_Display_Pattern(rising_edge_pattern);
 310:	8c e6       	ldi	r24, 0x6C	; 108
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	0e 94 96 03 	call	0x72c	; 0x72c <GLCD_void_Display_Pattern>
			
			for (int i = 0; i < loc_f32_pulse_width_ratio * CYCLE_WIDTH_IN_PIXELS; i++)
 318:	00 e0       	ldi	r16, 0x00	; 0
 31a:	10 e0       	ldi	r17, 0x00	; 0
 31c:	0c c0       	rjmp	.+24     	; 0x336 <PWM_DRAWER_Draw+0x1c2>
			{
				GLCD_void_Display_Pattern(on_pattern);
 31e:	8a e6       	ldi	r24, 0x6A	; 106
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	0e 94 96 03 	call	0x72c	; 0x72c <GLCD_void_Display_Pattern>
				j++;
 326:	29 81       	ldd	r18, Y+1	; 0x01
 328:	3a 81       	ldd	r19, Y+2	; 0x02
 32a:	2f 5f       	subi	r18, 0xFF	; 255
 32c:	3f 4f       	sbci	r19, 0xFF	; 255
 32e:	3a 83       	std	Y+2, r19	; 0x02
 330:	29 83       	std	Y+1, r18	; 0x01
				GLCD_void_Set_Cursor_Position(CURSOR_POSITION_0);
			}
			
			GLCD_void_Display_Pattern(rising_edge_pattern);
			
			for (int i = 0; i < loc_f32_pulse_width_ratio * CYCLE_WIDTH_IN_PIXELS; i++)
 332:	0f 5f       	subi	r16, 0xFF	; 255
 334:	1f 4f       	sbci	r17, 0xFF	; 255
 336:	b8 01       	movw	r22, r16
 338:	01 2e       	mov	r0, r17
 33a:	00 0c       	add	r0, r0
 33c:	88 0b       	sbc	r24, r24
 33e:	99 0b       	sbc	r25, r25
 340:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__floatsisf>
 344:	4b 01       	movw	r8, r22
 346:	5c 01       	movw	r10, r24
 348:	20 e0       	ldi	r18, 0x00	; 0
 34a:	30 e0       	ldi	r19, 0x00	; 0
 34c:	40 e7       	ldi	r20, 0x70	; 112
 34e:	52 e4       	ldi	r21, 0x42	; 66
 350:	c3 01       	movw	r24, r6
 352:	b2 01       	movw	r22, r4
 354:	0e 94 df 06 	call	0xdbe	; 0xdbe <__mulsf3>
 358:	6b 01       	movw	r12, r22
 35a:	7c 01       	movw	r14, r24
 35c:	9b 01       	movw	r18, r22
 35e:	ac 01       	movw	r20, r24
 360:	c5 01       	movw	r24, r10
 362:	b4 01       	movw	r22, r8
 364:	0e 94 80 05 	call	0xb00	; 0xb00 <__cmpsf2>
 368:	88 23       	and	r24, r24
 36a:	cc f2       	brlt	.-78     	; 0x31e <PWM_DRAWER_Draw+0x1aa>
			{
				GLCD_void_Display_Pattern(on_pattern);
				j++;
			}
			
			GLCD_void_Display_Pattern(falling_edge_pattern);
 36c:	87 e6       	ldi	r24, 0x67	; 103
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	0e 94 96 03 	call	0x72c	; 0x72c <GLCD_void_Display_Pattern>
			
			for (int i = 0; i < CYCLE_WIDTH_IN_PIXELS - (loc_f32_pulse_width_ratio * CYCLE_WIDTH_IN_PIXELS); i++)
 374:	00 e0       	ldi	r16, 0x00	; 0
 376:	10 e0       	ldi	r17, 0x00	; 0
 378:	0b c0       	rjmp	.+22     	; 0x390 <PWM_DRAWER_Draw+0x21c>
			{
				GLCD_void_Display_Pattern(off_pattern);
 37a:	85 e6       	ldi	r24, 0x65	; 101
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	0e 94 96 03 	call	0x72c	; 0x72c <GLCD_void_Display_Pattern>
				j++;
 382:	89 81       	ldd	r24, Y+1	; 0x01
 384:	9a 81       	ldd	r25, Y+2	; 0x02
 386:	01 96       	adiw	r24, 0x01	; 1
 388:	9a 83       	std	Y+2, r25	; 0x02
 38a:	89 83       	std	Y+1, r24	; 0x01
				j++;
			}
			
			GLCD_void_Display_Pattern(falling_edge_pattern);
			
			for (int i = 0; i < CYCLE_WIDTH_IN_PIXELS - (loc_f32_pulse_width_ratio * CYCLE_WIDTH_IN_PIXELS); i++)
 38c:	0f 5f       	subi	r16, 0xFF	; 255
 38e:	1f 4f       	sbci	r17, 0xFF	; 255
 390:	b8 01       	movw	r22, r16
 392:	01 2e       	mov	r0, r17
 394:	00 0c       	add	r0, r0
 396:	88 0b       	sbc	r24, r24
 398:	99 0b       	sbc	r25, r25
 39a:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__floatsisf>
 39e:	4b 01       	movw	r8, r22
 3a0:	5c 01       	movw	r10, r24
 3a2:	a7 01       	movw	r20, r14
 3a4:	96 01       	movw	r18, r12
 3a6:	60 e0       	ldi	r22, 0x00	; 0
 3a8:	70 e0       	ldi	r23, 0x00	; 0
 3aa:	80 e7       	ldi	r24, 0x70	; 112
 3ac:	92 e4       	ldi	r25, 0x42	; 66
 3ae:	0e 94 13 05 	call	0xa26	; 0xa26 <__subsf3>
 3b2:	9b 01       	movw	r18, r22
 3b4:	ac 01       	movw	r20, r24
 3b6:	c5 01       	movw	r24, r10
 3b8:	b4 01       	movw	r22, r8
 3ba:	0e 94 80 05 	call	0xb00	; 0xb00 <__cmpsf2>
 3be:	88 23       	and	r24, r24
 3c0:	e4 f2       	brlt	.-72     	; 0x37a <PWM_DRAWER_Draw+0x206>
			{
				GLCD_void_Display_Pattern(off_pattern);
				j++;
			}
			
			j+=4;
 3c2:	29 81       	ldd	r18, Y+1	; 0x01
 3c4:	3a 81       	ldd	r19, Y+2	; 0x02
 3c6:	2c 5f       	subi	r18, 0xFC	; 252
 3c8:	3f 4f       	sbci	r19, 0xFF	; 255
 3ca:	3a 83       	std	Y+2, r19	; 0x02
 3cc:	29 83       	std	Y+1, r18	; 0x01
		
		
		GLCD_void_Set_Line(LINE_6);
		GLCD_void_Set_Cursor_Position(CURSOR_POSITION_0);
		
		for (int j = 0; j < MAX_WIDTH;)
 3ce:	89 81       	ldd	r24, Y+1	; 0x01
 3d0:	9a 81       	ldd	r25, Y+2	; 0x02
 3d2:	80 38       	cpi	r24, 0x80	; 128
 3d4:	91 05       	cpc	r25, r1
 3d6:	0c f4       	brge	.+2      	; 0x3da <PWM_DRAWER_Draw+0x266>
 3d8:	8d cf       	rjmp	.-230    	; 0x2f4 <PWM_DRAWER_Draw+0x180>
			}
			
			j+=4;
		}
	}
}
 3da:	0f 90       	pop	r0
 3dc:	0f 90       	pop	r0
 3de:	0f 90       	pop	r0
 3e0:	0f 90       	pop	r0
 3e2:	df 91       	pop	r29
 3e4:	cf 91       	pop	r28
 3e6:	1f 91       	pop	r17
 3e8:	0f 91       	pop	r16
 3ea:	ff 90       	pop	r15
 3ec:	ef 90       	pop	r14
 3ee:	df 90       	pop	r13
 3f0:	cf 90       	pop	r12
 3f2:	bf 90       	pop	r11
 3f4:	af 90       	pop	r10
 3f6:	9f 90       	pop	r9
 3f8:	8f 90       	pop	r8
 3fa:	7f 90       	pop	r7
 3fc:	6f 90       	pop	r6
 3fe:	5f 90       	pop	r5
 400:	4f 90       	pop	r4
 402:	08 95       	ret

00000404 <void_Handle_Prescaler>:

void void_Handle_Prescaler()
{
	switch(config.prescaler)
 404:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <config>
 408:	83 30       	cpi	r24, 0x03	; 3
 40a:	c9 f0       	breq	.+50     	; 0x43e <void_Handle_Prescaler+0x3a>
 40c:	28 f4       	brcc	.+10     	; 0x418 <void_Handle_Prescaler+0x14>
 40e:	81 30       	cpi	r24, 0x01	; 1
 410:	41 f0       	breq	.+16     	; 0x422 <void_Handle_Prescaler+0x1e>
 412:	82 30       	cpi	r24, 0x02	; 2
 414:	69 f0       	breq	.+26     	; 0x430 <void_Handle_Prescaler+0x2c>
 416:	08 95       	ret
 418:	84 30       	cpi	r24, 0x04	; 4
 41a:	c1 f0       	breq	.+48     	; 0x44c <void_Handle_Prescaler+0x48>
 41c:	85 30       	cpi	r24, 0x05	; 5
 41e:	e9 f0       	breq	.+58     	; 0x45a <void_Handle_Prescaler+0x56>
 420:	08 95       	ret
	{
		case PRESCALE_1:
		loc_u16_prescaler = 1;
 422:	81 e0       	ldi	r24, 0x01	; 1
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 42a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		break;
 42e:	08 95       	ret
		case PRESCALE_8:
		loc_u16_prescaler = 8;
 430:	88 e0       	ldi	r24, 0x08	; 8
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 438:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		break;
 43c:	08 95       	ret
		case PRESCALE_64:
		loc_u16_prescaler = 64;
 43e:	80 e4       	ldi	r24, 0x40	; 64
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 446:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		break;
 44a:	08 95       	ret
		case PRESCALE_256:
		loc_u16_prescaler = 256;
 44c:	80 e0       	ldi	r24, 0x00	; 0
 44e:	91 e0       	ldi	r25, 0x01	; 1
 450:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 454:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		break;
 458:	08 95       	ret
		case PRESCALE_1024:
		loc_u16_prescaler = 1024;
 45a:	80 e0       	ldi	r24, 0x00	; 0
 45c:	94 e0       	ldi	r25, 0x04	; 4
 45e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 462:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 466:	08 95       	ret

00000468 <PWM_DRAWER_Init>:
		//GIE_void_Disable();
	}
}

void PWM_DRAWER_Init()
{
 468:	cf 93       	push	r28
 46a:	df 93       	push	r29
	void_Handle_Prescaler();
 46c:	0e 94 02 02 	call	0x404	; 0x404 <void_Handle_Prescaler>
	
	DIO_void_Set_Pin_Direction(PORTB_, OC0_PIN, PIN_OUTPUT);
 470:	41 e0       	ldi	r20, 0x01	; 1
 472:	63 e0       	ldi	r22, 0x03	; 3
 474:	81 e0       	ldi	r24, 0x01	; 1
 476:	0e 94 b1 03 	call	0x762	; 0x762 <DIO_void_Set_Pin_Direction>
	DIO_void_Set_Pin_Direction(PORTD_, ICP1_PIN, PIN_INPUT);
 47a:	40 e0       	ldi	r20, 0x00	; 0
 47c:	66 e0       	ldi	r22, 0x06	; 6
 47e:	83 e0       	ldi	r24, 0x03	; 3
 480:	0e 94 b1 03 	call	0x762	; 0x762 <DIO_void_Set_Pin_Direction>
	
	GLCD_void_Init();
 484:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <GLCD_void_Init>
	GLCD_void_Select_Page(PAGE_0);
 488:	81 e0       	ldi	r24, 0x01	; 1
 48a:	0e 94 c4 02 	call	0x588	; 0x588 <GLCD_void_Select_Page>
	GLCD_void_Send_Command(DISPLAY_ON);
 48e:	8f e3       	ldi	r24, 0x3F	; 63
 490:	0e 94 8a 02 	call	0x514	; 0x514 <GLCD_void_Send_Command>
	
	TIMER0_void_Init(config.prescaler, config.mode);
 494:	c2 e6       	ldi	r28, 0x62	; 98
 496:	d0 e0       	ldi	r29, 0x00	; 0
 498:	69 81       	ldd	r22, Y+1	; 0x01
 49a:	88 81       	ld	r24, Y
 49c:	0e 94 b9 04 	call	0x972	; 0x972 <TIMER0_void_Init>
	TIMER0_void_Set_Compare_Output_Mode(config.compare_output_mode);
 4a0:	8a 81       	ldd	r24, Y+2	; 0x02
 4a2:	0e 94 bc 04 	call	0x978	; 0x978 <TIMER0_void_Set_Compare_Output_Mode>
	
	TIMER0_void_Set_Counter_Value(0);
 4a6:	80 e0       	ldi	r24, 0x00	; 0
 4a8:	0e 94 c4 04 	call	0x988	; 0x988 <TIMER0_void_Set_Counter_Value>
	TIMER0_void_Set_Top_Value(180);
 4ac:	84 eb       	ldi	r24, 0xB4	; 180
 4ae:	0e 94 c6 04 	call	0x98c	; 0x98c <TIMER0_void_Set_Top_Value>
	
	TIMER1_void_Init(config.prescaler, NORMAL);
 4b2:	60 e0       	ldi	r22, 0x00	; 0
 4b4:	88 81       	ld	r24, Y
 4b6:	0e 94 cc 04 	call	0x998	; 0x998 <TIMER1_void_Init>
	TIMER1_void_ICU_Edge_Select(RISING_EDGE);
 4ba:	81 e0       	ldi	r24, 0x01	; 1
 4bc:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <TIMER1_void_ICU_Edge_Select>
	
	TIMER1_void_Interrupt_Enable(TIMER1_INPUT_CAPTURE_INTERRUPT);
 4c0:	80 e0       	ldi	r24, 0x00	; 0
 4c2:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <TIMER1_void_Interrupt_Enable>
	
	TIMER1_void_Set_Counter_Value(0);
 4c6:	80 e0       	ldi	r24, 0x00	; 0
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	0e 94 05 05 	call	0xa0a	; 0xa0a <TIMER1_void_Set_Counter_Value>
	
	GIE_void_Enable();
 4ce:	0e 94 b1 04 	call	0x962	; 0x962 <GIE_void_Enable>
}
 4d2:	df 91       	pop	r29
 4d4:	cf 91       	pop	r28
 4d6:	08 95       	ret

000004d8 <GLCD_void_Init>:

#include <util/delay.h>

void GLCD_void_Init()
{
	DIO_void_Set_Pin_Direction(CTRL_PORT, RS_PIN, PIN_OUTPUT);
 4d8:	41 e0       	ldi	r20, 0x01	; 1
 4da:	60 e0       	ldi	r22, 0x00	; 0
 4dc:	82 e0       	ldi	r24, 0x02	; 2
 4de:	0e 94 b1 03 	call	0x762	; 0x762 <DIO_void_Set_Pin_Direction>
	DIO_void_Set_Pin_Direction(CTRL_PORT, RW_PIN, PIN_OUTPUT);
 4e2:	41 e0       	ldi	r20, 0x01	; 1
 4e4:	61 e0       	ldi	r22, 0x01	; 1
 4e6:	82 e0       	ldi	r24, 0x02	; 2
 4e8:	0e 94 b1 03 	call	0x762	; 0x762 <DIO_void_Set_Pin_Direction>
	DIO_void_Set_Pin_Direction(CTRL_PORT, EN_PIN, PIN_OUTPUT);
 4ec:	41 e0       	ldi	r20, 0x01	; 1
 4ee:	62 e0       	ldi	r22, 0x02	; 2
 4f0:	82 e0       	ldi	r24, 0x02	; 2
 4f2:	0e 94 b1 03 	call	0x762	; 0x762 <DIO_void_Set_Pin_Direction>
	DIO_void_Set_Pin_Direction(CTRL_PORT, CS1_PIN, PIN_OUTPUT);
 4f6:	41 e0       	ldi	r20, 0x01	; 1
 4f8:	63 e0       	ldi	r22, 0x03	; 3
 4fa:	82 e0       	ldi	r24, 0x02	; 2
 4fc:	0e 94 b1 03 	call	0x762	; 0x762 <DIO_void_Set_Pin_Direction>
	DIO_void_Set_Pin_Direction(CTRL_PORT, CS2_PIN, PIN_OUTPUT);
 500:	41 e0       	ldi	r20, 0x01	; 1
 502:	64 e0       	ldi	r22, 0x04	; 4
 504:	82 e0       	ldi	r24, 0x02	; 2
 506:	0e 94 b1 03 	call	0x762	; 0x762 <DIO_void_Set_Pin_Direction>
	
	DIO_void_Set_Port_Direction(DATA_PORT, PORT_OUTPUT);
 50a:	6f ef       	ldi	r22, 0xFF	; 255
 50c:	80 e0       	ldi	r24, 0x00	; 0
 50e:	0e 94 91 04 	call	0x922	; 0x922 <DIO_void_Set_Port_Direction>
 512:	08 95       	ret

00000514 <GLCD_void_Send_Command>:
}
	
void GLCD_void_Send_Command(uint8_t copy_u8_command)
{
	DIO_void_Set_Port_Value(DATA_PORT, copy_u8_command);
 514:	68 2f       	mov	r22, r24
 516:	80 e0       	ldi	r24, 0x00	; 0
 518:	0e 94 a1 04 	call	0x942	; 0x942 <DIO_void_Set_Port_Value>
	
	DIO_void_Set_Pin_Value(CTRL_PORT, RS_PIN, PIN_LOW);
 51c:	40 e0       	ldi	r20, 0x00	; 0
 51e:	60 e0       	ldi	r22, 0x00	; 0
 520:	82 e0       	ldi	r24, 0x02	; 2
 522:	0e 94 21 04 	call	0x842	; 0x842 <DIO_void_Set_Pin_Value>
	DIO_void_Set_Pin_Value(CTRL_PORT, RW_PIN, PIN_LOW);
 526:	40 e0       	ldi	r20, 0x00	; 0
 528:	61 e0       	ldi	r22, 0x01	; 1
 52a:	82 e0       	ldi	r24, 0x02	; 2
 52c:	0e 94 21 04 	call	0x842	; 0x842 <DIO_void_Set_Pin_Value>
	
	DIO_void_Set_Pin_Value(CTRL_PORT, EN_PIN, PIN_HIGH);
 530:	41 e0       	ldi	r20, 0x01	; 1
 532:	62 e0       	ldi	r22, 0x02	; 2
 534:	82 e0       	ldi	r24, 0x02	; 2
 536:	0e 94 21 04 	call	0x842	; 0x842 <DIO_void_Set_Pin_Value>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 53a:	8a e1       	ldi	r24, 0x1A	; 26
 53c:	8a 95       	dec	r24
 53e:	f1 f7       	brne	.-4      	; 0x53c <GLCD_void_Send_Command+0x28>
 540:	00 c0       	rjmp	.+0      	; 0x542 <GLCD_void_Send_Command+0x2e>
	_delay_us(5);
	DIO_void_Set_Pin_Value(CTRL_PORT, EN_PIN, PIN_LOW);
 542:	40 e0       	ldi	r20, 0x00	; 0
 544:	62 e0       	ldi	r22, 0x02	; 2
 546:	82 e0       	ldi	r24, 0x02	; 2
 548:	0e 94 21 04 	call	0x842	; 0x842 <DIO_void_Set_Pin_Value>
 54c:	08 95       	ret

0000054e <GLCD_void_Send_Data>:
}

void GLCD_void_Send_Data(uint8_t copy_u8_data)
{
	DIO_void_Set_Port_Value(DATA_PORT, copy_u8_data);
 54e:	68 2f       	mov	r22, r24
 550:	80 e0       	ldi	r24, 0x00	; 0
 552:	0e 94 a1 04 	call	0x942	; 0x942 <DIO_void_Set_Port_Value>
	
	DIO_void_Set_Pin_Value(CTRL_PORT, RS_PIN, PIN_HIGH);
 556:	41 e0       	ldi	r20, 0x01	; 1
 558:	60 e0       	ldi	r22, 0x00	; 0
 55a:	82 e0       	ldi	r24, 0x02	; 2
 55c:	0e 94 21 04 	call	0x842	; 0x842 <DIO_void_Set_Pin_Value>
	DIO_void_Set_Pin_Value(CTRL_PORT, RW_PIN, PIN_LOW);
 560:	40 e0       	ldi	r20, 0x00	; 0
 562:	61 e0       	ldi	r22, 0x01	; 1
 564:	82 e0       	ldi	r24, 0x02	; 2
 566:	0e 94 21 04 	call	0x842	; 0x842 <DIO_void_Set_Pin_Value>
	
	DIO_void_Set_Pin_Value(CTRL_PORT, EN_PIN, PIN_HIGH);
 56a:	41 e0       	ldi	r20, 0x01	; 1
 56c:	62 e0       	ldi	r22, 0x02	; 2
 56e:	82 e0       	ldi	r24, 0x02	; 2
 570:	0e 94 21 04 	call	0x842	; 0x842 <DIO_void_Set_Pin_Value>
 574:	8a e1       	ldi	r24, 0x1A	; 26
 576:	8a 95       	dec	r24
 578:	f1 f7       	brne	.-4      	; 0x576 <GLCD_void_Send_Data+0x28>
 57a:	00 c0       	rjmp	.+0      	; 0x57c <GLCD_void_Send_Data+0x2e>
	_delay_us(5);
	DIO_void_Set_Pin_Value(CTRL_PORT, EN_PIN, PIN_LOW);
 57c:	40 e0       	ldi	r20, 0x00	; 0
 57e:	62 e0       	ldi	r22, 0x02	; 2
 580:	82 e0       	ldi	r24, 0x02	; 2
 582:	0e 94 21 04 	call	0x842	; 0x842 <DIO_void_Set_Pin_Value>
 586:	08 95       	ret

00000588 <GLCD_void_Select_Page>:
}

void GLCD_void_Select_Page(uint8_t copy_u8_page)
{
	switch(copy_u8_page)
 588:	81 30       	cpi	r24, 0x01	; 1
 58a:	89 f0       	breq	.+34     	; 0x5ae <GLCD_void_Select_Page+0x26>
 58c:	28 f0       	brcs	.+10     	; 0x598 <GLCD_void_Select_Page+0x10>
 58e:	82 30       	cpi	r24, 0x02	; 2
 590:	c9 f0       	breq	.+50     	; 0x5c4 <GLCD_void_Select_Page+0x3c>
 592:	83 30       	cpi	r24, 0x03	; 3
 594:	11 f1       	breq	.+68     	; 0x5da <GLCD_void_Select_Page+0x52>
 596:	08 95       	ret
	{
		case NO_PAGE:
			DIO_void_Set_Pin_Value(CTRL_PORT, CS1_PIN, PIN_LOW);
 598:	40 e0       	ldi	r20, 0x00	; 0
 59a:	63 e0       	ldi	r22, 0x03	; 3
 59c:	82 e0       	ldi	r24, 0x02	; 2
 59e:	0e 94 21 04 	call	0x842	; 0x842 <DIO_void_Set_Pin_Value>
			DIO_void_Set_Pin_Value(CTRL_PORT, CS2_PIN, PIN_LOW);
 5a2:	40 e0       	ldi	r20, 0x00	; 0
 5a4:	64 e0       	ldi	r22, 0x04	; 4
 5a6:	82 e0       	ldi	r24, 0x02	; 2
 5a8:	0e 94 21 04 	call	0x842	; 0x842 <DIO_void_Set_Pin_Value>
		break;
 5ac:	08 95       	ret
		
		case PAGE_0:
			DIO_void_Set_Pin_Value(CTRL_PORT, CS1_PIN, PIN_HIGH);
 5ae:	41 e0       	ldi	r20, 0x01	; 1
 5b0:	63 e0       	ldi	r22, 0x03	; 3
 5b2:	82 e0       	ldi	r24, 0x02	; 2
 5b4:	0e 94 21 04 	call	0x842	; 0x842 <DIO_void_Set_Pin_Value>
			DIO_void_Set_Pin_Value(CTRL_PORT, CS2_PIN, PIN_LOW);
 5b8:	40 e0       	ldi	r20, 0x00	; 0
 5ba:	64 e0       	ldi	r22, 0x04	; 4
 5bc:	82 e0       	ldi	r24, 0x02	; 2
 5be:	0e 94 21 04 	call	0x842	; 0x842 <DIO_void_Set_Pin_Value>
		break;
 5c2:	08 95       	ret
		
		case PAGE_1:
			DIO_void_Set_Pin_Value(CTRL_PORT, CS1_PIN, PIN_LOW);
 5c4:	40 e0       	ldi	r20, 0x00	; 0
 5c6:	63 e0       	ldi	r22, 0x03	; 3
 5c8:	82 e0       	ldi	r24, 0x02	; 2
 5ca:	0e 94 21 04 	call	0x842	; 0x842 <DIO_void_Set_Pin_Value>
			DIO_void_Set_Pin_Value(CTRL_PORT, CS2_PIN, PIN_HIGH);
 5ce:	41 e0       	ldi	r20, 0x01	; 1
 5d0:	64 e0       	ldi	r22, 0x04	; 4
 5d2:	82 e0       	ldi	r24, 0x02	; 2
 5d4:	0e 94 21 04 	call	0x842	; 0x842 <DIO_void_Set_Pin_Value>
		break;
 5d8:	08 95       	ret
		
		case BOTH_PAGES:
			DIO_void_Set_Pin_Value(CTRL_PORT, CS1_PIN, PIN_HIGH);
 5da:	41 e0       	ldi	r20, 0x01	; 1
 5dc:	63 e0       	ldi	r22, 0x03	; 3
 5de:	82 e0       	ldi	r24, 0x02	; 2
 5e0:	0e 94 21 04 	call	0x842	; 0x842 <DIO_void_Set_Pin_Value>
			DIO_void_Set_Pin_Value(CTRL_PORT, CS2_PIN, PIN_HIGH);
 5e4:	41 e0       	ldi	r20, 0x01	; 1
 5e6:	64 e0       	ldi	r22, 0x04	; 4
 5e8:	82 e0       	ldi	r24, 0x02	; 2
 5ea:	0e 94 21 04 	call	0x842	; 0x842 <DIO_void_Set_Pin_Value>
 5ee:	08 95       	ret

000005f0 <GLCD_void_Set_Cursor_Position>:
}

void GLCD_void_Set_Cursor_Position(uint8_t copy_u8_position)
{
	copy_u8_position = (0b01 << 6) | copy_u8_position;
	GLCD_void_Send_Command(copy_u8_position);
 5f0:	80 64       	ori	r24, 0x40	; 64
 5f2:	0e 94 8a 02 	call	0x514	; 0x514 <GLCD_void_Send_Command>
 5f6:	08 95       	ret

000005f8 <GLCD_void_Set_Line>:
}

void GLCD_void_Set_Line(uint8_t copy_u8_line)
{
	copy_u8_line = (0b10111 << 3) | copy_u8_line;
	GLCD_void_Send_Command(copy_u8_line);
 5f8:	88 6b       	ori	r24, 0xB8	; 184
 5fa:	0e 94 8a 02 	call	0x514	; 0x514 <GLCD_void_Send_Command>
 5fe:	08 95       	ret

00000600 <GLCD_void_Display_Char>:
}

void GLCD_void_Display_Char(uint8_t copy_u8_char)
{
 600:	cf 93       	push	r28
 602:	df 93       	push	r29
 604:	d8 2f       	mov	r29, r24
	for (uint8_t i = 0; i < CHAR_LENGTH; i++)
 606:	c0 e0       	ldi	r28, 0x00	; 0
 608:	12 c0       	rjmp	.+36     	; 0x62e <GLCD_void_Display_Char+0x2e>
	{
		GLCD_void_Send_Data(font5x8[((copy_u8_char - 32) * 5) + i]);
 60a:	8d 2f       	mov	r24, r29
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	80 97       	sbiw	r24, 0x20	; 32
 610:	fc 01       	movw	r30, r24
 612:	ee 0f       	add	r30, r30
 614:	ff 1f       	adc	r31, r31
 616:	ee 0f       	add	r30, r30
 618:	ff 1f       	adc	r31, r31
 61a:	e8 0f       	add	r30, r24
 61c:	f9 1f       	adc	r31, r25
 61e:	ec 0f       	add	r30, r28
 620:	f1 1d       	adc	r31, r1
 622:	e1 59       	subi	r30, 0x91	; 145
 624:	ff 4f       	sbci	r31, 0xFF	; 255
 626:	80 81       	ld	r24, Z
 628:	0e 94 a7 02 	call	0x54e	; 0x54e <GLCD_void_Send_Data>
	GLCD_void_Send_Command(copy_u8_line);
}

void GLCD_void_Display_Char(uint8_t copy_u8_char)
{
	for (uint8_t i = 0; i < CHAR_LENGTH; i++)
 62c:	cf 5f       	subi	r28, 0xFF	; 255
 62e:	c5 30       	cpi	r28, 0x05	; 5
 630:	60 f3       	brcs	.-40     	; 0x60a <GLCD_void_Display_Char+0xa>
	{
		GLCD_void_Send_Data(font5x8[((copy_u8_char - 32) * 5) + i]);
	}
}
 632:	df 91       	pop	r29
 634:	cf 91       	pop	r28
 636:	08 95       	ret

00000638 <GLCD_void_Display_String>:

void GLCD_void_Display_String(char* copy_u8_string)
{
 638:	cf 93       	push	r28
 63a:	df 93       	push	r29
 63c:	ec 01       	movw	r28, r24
	while (*copy_u8_string != '\0')
 63e:	03 c0       	rjmp	.+6      	; 0x646 <GLCD_void_Display_String+0xe>
	{
		GLCD_void_Display_Char(*copy_u8_string);
 640:	0e 94 00 03 	call	0x600	; 0x600 <GLCD_void_Display_Char>
		copy_u8_string++;
 644:	21 96       	adiw	r28, 0x01	; 1
	}
}

void GLCD_void_Display_String(char* copy_u8_string)
{
	while (*copy_u8_string != '\0')
 646:	88 81       	ld	r24, Y
 648:	81 11       	cpse	r24, r1
 64a:	fa cf       	rjmp	.-12     	; 0x640 <GLCD_void_Display_String+0x8>
	{
		GLCD_void_Display_Char(*copy_u8_string);
		copy_u8_string++;
	}
}
 64c:	df 91       	pop	r29
 64e:	cf 91       	pop	r28
 650:	08 95       	ret

00000652 <GLCD_void_Display_Integer>:

void GLCD_void_Display_Integer(int32_t copy_s32_integer)
{
 652:	0f 93       	push	r16
 654:	1f 93       	push	r17
 656:	cf 93       	push	r28
 658:	df 93       	push	r29
 65a:	00 d0       	rcall	.+0      	; 0x65c <GLCD_void_Display_Integer+0xa>
 65c:	00 d0       	rcall	.+0      	; 0x65e <GLCD_void_Display_Integer+0xc>
 65e:	1f 92       	push	r1
 660:	cd b7       	in	r28, 0x3d	; 61
 662:	de b7       	in	r29, 0x3e	; 62
	uint8_t loc_u8_digit = 0;
	uint8_t loc_u8_str_reversed[5] = "";
 664:	1a 82       	std	Y+2, r1	; 0x02
 666:	19 82       	std	Y+1, r1	; 0x01
 668:	fe 01       	movw	r30, r28
 66a:	33 96       	adiw	r30, 0x03	; 3
 66c:	23 e0       	ldi	r18, 0x03	; 3
 66e:	df 01       	movw	r26, r30
 670:	1d 92       	st	X+, r1
 672:	2a 95       	dec	r18
 674:	e9 f7       	brne	.-6      	; 0x670 <GLCD_void_Display_Integer+0x1e>
	uint8_t* str_ptr = loc_u8_str_reversed;
 676:	8e 01       	movw	r16, r28
 678:	0f 5f       	subi	r16, 0xFF	; 255
 67a:	1f 4f       	sbci	r17, 0xFF	; 255
	
	do
	{
		loc_u8_digit = copy_s32_integer % 10;
 67c:	2a e0       	ldi	r18, 0x0A	; 10
 67e:	30 e0       	ldi	r19, 0x00	; 0
 680:	40 e0       	ldi	r20, 0x00	; 0
 682:	50 e0       	ldi	r21, 0x00	; 0
 684:	0e 94 4c 07 	call	0xe98	; 0xe98 <__divmodsi4>
		*str_ptr = (char)(48 + loc_u8_digit);
 688:	60 5d       	subi	r22, 0xD0	; 208
 68a:	f8 01       	movw	r30, r16
 68c:	61 93       	st	Z+, r22
 68e:	8f 01       	movw	r16, r30
		copy_s32_integer = copy_s32_integer / 10;
 690:	62 2f       	mov	r22, r18
 692:	73 2f       	mov	r23, r19
 694:	84 2f       	mov	r24, r20
 696:	95 2f       	mov	r25, r21
		str_ptr++;
	} while(copy_s32_integer > 0);
 698:	16 16       	cp	r1, r22
 69a:	17 06       	cpc	r1, r23
 69c:	18 06       	cpc	r1, r24
 69e:	19 06       	cpc	r1, r25
 6a0:	6c f3       	brlt	.-38     	; 0x67c <GLCD_void_Display_Integer+0x2a>
 6a2:	05 c0       	rjmp	.+10     	; 0x6ae <GLCD_void_Display_Integer+0x5c>
	
	while (str_ptr != loc_u8_str_reversed) {
		str_ptr--;
		GLCD_void_Display_Char(*str_ptr);
 6a4:	d8 01       	movw	r26, r16
 6a6:	8e 91       	ld	r24, -X
 6a8:	8d 01       	movw	r16, r26
 6aa:	0e 94 00 03 	call	0x600	; 0x600 <GLCD_void_Display_Char>
		*str_ptr = (char)(48 + loc_u8_digit);
		copy_s32_integer = copy_s32_integer / 10;
		str_ptr++;
	} while(copy_s32_integer > 0);
	
	while (str_ptr != loc_u8_str_reversed) {
 6ae:	ce 01       	movw	r24, r28
 6b0:	01 96       	adiw	r24, 0x01	; 1
 6b2:	80 17       	cp	r24, r16
 6b4:	91 07       	cpc	r25, r17
 6b6:	b1 f7       	brne	.-20     	; 0x6a4 <GLCD_void_Display_Integer+0x52>
		str_ptr--;
		GLCD_void_Display_Char(*str_ptr);
	}
}
 6b8:	0f 90       	pop	r0
 6ba:	0f 90       	pop	r0
 6bc:	0f 90       	pop	r0
 6be:	0f 90       	pop	r0
 6c0:	0f 90       	pop	r0
 6c2:	df 91       	pop	r29
 6c4:	cf 91       	pop	r28
 6c6:	1f 91       	pop	r17
 6c8:	0f 91       	pop	r16
 6ca:	08 95       	ret

000006cc <GLCD_void_Display_Floating_Point>:

void GLCD_void_Display_Floating_Point(float32_t copy_f32_float)
{
 6cc:	8f 92       	push	r8
 6ce:	9f 92       	push	r9
 6d0:	af 92       	push	r10
 6d2:	bf 92       	push	r11
 6d4:	cf 92       	push	r12
 6d6:	df 92       	push	r13
 6d8:	ef 92       	push	r14
 6da:	ff 92       	push	r15
 6dc:	6b 01       	movw	r12, r22
 6de:	7c 01       	movw	r14, r24
	uint32_t loc_integer_part = (int32_t) copy_f32_float;
 6e0:	0e 94 f7 05 	call	0xbee	; 0xbee <__fixsfsi>
 6e4:	4b 01       	movw	r8, r22
 6e6:	5c 01       	movw	r10, r24
	GLCD_void_Display_Integer(loc_integer_part);
 6e8:	0e 94 29 03 	call	0x652	; 0x652 <GLCD_void_Display_Integer>
	GLCD_void_Display_Char('.');
 6ec:	8e e2       	ldi	r24, 0x2E	; 46
 6ee:	0e 94 00 03 	call	0x600	; 0x600 <GLCD_void_Display_Char>
	GLCD_void_Display_Integer((copy_f32_float - loc_integer_part) * 100);
 6f2:	c5 01       	movw	r24, r10
 6f4:	b4 01       	movw	r22, r8
 6f6:	0e 94 2d 06 	call	0xc5a	; 0xc5a <__floatunsisf>
 6fa:	9b 01       	movw	r18, r22
 6fc:	ac 01       	movw	r20, r24
 6fe:	c7 01       	movw	r24, r14
 700:	b6 01       	movw	r22, r12
 702:	0e 94 13 05 	call	0xa26	; 0xa26 <__subsf3>
 706:	20 e0       	ldi	r18, 0x00	; 0
 708:	30 e0       	ldi	r19, 0x00	; 0
 70a:	48 ec       	ldi	r20, 0xC8	; 200
 70c:	52 e4       	ldi	r21, 0x42	; 66
 70e:	0e 94 df 06 	call	0xdbe	; 0xdbe <__mulsf3>
 712:	0e 94 f7 05 	call	0xbee	; 0xbee <__fixsfsi>
 716:	0e 94 29 03 	call	0x652	; 0x652 <GLCD_void_Display_Integer>
}
 71a:	ff 90       	pop	r15
 71c:	ef 90       	pop	r14
 71e:	df 90       	pop	r13
 720:	cf 90       	pop	r12
 722:	bf 90       	pop	r11
 724:	af 90       	pop	r10
 726:	9f 90       	pop	r9
 728:	8f 90       	pop	r8
 72a:	08 95       	ret

0000072c <GLCD_void_Display_Pattern>:

void GLCD_void_Display_Pattern(uint8_t pattern[])
{
 72c:	0f 93       	push	r16
 72e:	1f 93       	push	r17
 730:	cf 93       	push	r28
 732:	df 93       	push	r29
 734:	8c 01       	movw	r16, r24
	int i = 0;
 736:	c0 e0       	ldi	r28, 0x00	; 0
 738:	d0 e0       	ldi	r29, 0x00	; 0
	while(pattern[i] != '\0')
 73a:	03 c0       	rjmp	.+6      	; 0x742 <GLCD_void_Display_Pattern+0x16>
	{
		GLCD_void_Send_Data(pattern[i]);
 73c:	0e 94 a7 02 	call	0x54e	; 0x54e <GLCD_void_Send_Data>
		i++;
 740:	21 96       	adiw	r28, 0x01	; 1
}

void GLCD_void_Display_Pattern(uint8_t pattern[])
{
	int i = 0;
	while(pattern[i] != '\0')
 742:	f8 01       	movw	r30, r16
 744:	ec 0f       	add	r30, r28
 746:	fd 1f       	adc	r31, r29
 748:	80 81       	ld	r24, Z
 74a:	81 11       	cpse	r24, r1
 74c:	f7 cf       	rjmp	.-18     	; 0x73c <GLCD_void_Display_Pattern+0x10>
	{
		GLCD_void_Send_Data(pattern[i]);
		i++;
	}
 74e:	df 91       	pop	r29
 750:	cf 91       	pop	r28
 752:	1f 91       	pop	r17
 754:	0f 91       	pop	r16
 756:	08 95       	ret

00000758 <main>:

#include "APP/PWM_DRAWER_App.h"

int main(void)
{
	PWM_DRAWER_Init();
 758:	0e 94 34 02 	call	0x468	; 0x468 <PWM_DRAWER_Init>
	
    /* Replace with your application code */
    while (1) 
    {
		PWM_DRAWER_Draw();
 75c:	0e 94 ba 00 	call	0x174	; 0x174 <PWM_DRAWER_Draw>
 760:	fd cf       	rjmp	.-6      	; 0x75c <main+0x4>

00000762 <DIO_void_Set_Pin_Direction>:
			loc_u8_port_value = PIND_REG;
		break;
	}
	
	return loc_u8_port_value;
}
 762:	41 30       	cpi	r20, 0x01	; 1
 764:	a1 f5       	brne	.+104    	; 0x7ce <DIO_void_Set_Pin_Direction+0x6c>
 766:	81 30       	cpi	r24, 0x01	; 1
 768:	89 f0       	breq	.+34     	; 0x78c <DIO_void_Set_Pin_Direction+0x2a>
 76a:	28 f0       	brcs	.+10     	; 0x776 <DIO_void_Set_Pin_Direction+0x14>
 76c:	82 30       	cpi	r24, 0x02	; 2
 76e:	c9 f0       	breq	.+50     	; 0x7a2 <DIO_void_Set_Pin_Direction+0x40>
 770:	83 30       	cpi	r24, 0x03	; 3
 772:	11 f1       	breq	.+68     	; 0x7b8 <DIO_void_Set_Pin_Direction+0x56>
 774:	08 95       	ret
 776:	2a b3       	in	r18, 0x1a	; 26
 778:	81 e0       	ldi	r24, 0x01	; 1
 77a:	90 e0       	ldi	r25, 0x00	; 0
 77c:	02 c0       	rjmp	.+4      	; 0x782 <DIO_void_Set_Pin_Direction+0x20>
 77e:	88 0f       	add	r24, r24
 780:	99 1f       	adc	r25, r25
 782:	6a 95       	dec	r22
 784:	e2 f7       	brpl	.-8      	; 0x77e <DIO_void_Set_Pin_Direction+0x1c>
 786:	82 2b       	or	r24, r18
 788:	8a bb       	out	0x1a, r24	; 26
 78a:	08 95       	ret
 78c:	27 b3       	in	r18, 0x17	; 23
 78e:	81 e0       	ldi	r24, 0x01	; 1
 790:	90 e0       	ldi	r25, 0x00	; 0
 792:	02 c0       	rjmp	.+4      	; 0x798 <DIO_void_Set_Pin_Direction+0x36>
 794:	88 0f       	add	r24, r24
 796:	99 1f       	adc	r25, r25
 798:	6a 95       	dec	r22
 79a:	e2 f7       	brpl	.-8      	; 0x794 <DIO_void_Set_Pin_Direction+0x32>
 79c:	82 2b       	or	r24, r18
 79e:	87 bb       	out	0x17, r24	; 23
 7a0:	08 95       	ret
 7a2:	24 b3       	in	r18, 0x14	; 20
 7a4:	81 e0       	ldi	r24, 0x01	; 1
 7a6:	90 e0       	ldi	r25, 0x00	; 0
 7a8:	02 c0       	rjmp	.+4      	; 0x7ae <DIO_void_Set_Pin_Direction+0x4c>
 7aa:	88 0f       	add	r24, r24
 7ac:	99 1f       	adc	r25, r25
 7ae:	6a 95       	dec	r22
 7b0:	e2 f7       	brpl	.-8      	; 0x7aa <DIO_void_Set_Pin_Direction+0x48>
 7b2:	82 2b       	or	r24, r18
 7b4:	84 bb       	out	0x14, r24	; 20
 7b6:	08 95       	ret
 7b8:	21 b3       	in	r18, 0x11	; 17
 7ba:	81 e0       	ldi	r24, 0x01	; 1
 7bc:	90 e0       	ldi	r25, 0x00	; 0
 7be:	02 c0       	rjmp	.+4      	; 0x7c4 <DIO_void_Set_Pin_Direction+0x62>
 7c0:	88 0f       	add	r24, r24
 7c2:	99 1f       	adc	r25, r25
 7c4:	6a 95       	dec	r22
 7c6:	e2 f7       	brpl	.-8      	; 0x7c0 <DIO_void_Set_Pin_Direction+0x5e>
 7c8:	82 2b       	or	r24, r18
 7ca:	81 bb       	out	0x11, r24	; 17
 7cc:	08 95       	ret
 7ce:	41 11       	cpse	r20, r1
 7d0:	37 c0       	rjmp	.+110    	; 0x840 <__DATA_REGION_LENGTH__+0x40>
 7d2:	81 30       	cpi	r24, 0x01	; 1
 7d4:	91 f0       	breq	.+36     	; 0x7fa <DIO_void_Set_Pin_Direction+0x98>
 7d6:	28 f0       	brcs	.+10     	; 0x7e2 <DIO_void_Set_Pin_Direction+0x80>
 7d8:	82 30       	cpi	r24, 0x02	; 2
 7da:	d9 f0       	breq	.+54     	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 7dc:	83 30       	cpi	r24, 0x03	; 3
 7de:	29 f1       	breq	.+74     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 7e0:	08 95       	ret
 7e2:	2a b3       	in	r18, 0x1a	; 26
 7e4:	81 e0       	ldi	r24, 0x01	; 1
 7e6:	90 e0       	ldi	r25, 0x00	; 0
 7e8:	02 c0       	rjmp	.+4      	; 0x7ee <DIO_void_Set_Pin_Direction+0x8c>
 7ea:	88 0f       	add	r24, r24
 7ec:	99 1f       	adc	r25, r25
 7ee:	6a 95       	dec	r22
 7f0:	e2 f7       	brpl	.-8      	; 0x7ea <DIO_void_Set_Pin_Direction+0x88>
 7f2:	80 95       	com	r24
 7f4:	82 23       	and	r24, r18
 7f6:	8a bb       	out	0x1a, r24	; 26
 7f8:	08 95       	ret
 7fa:	27 b3       	in	r18, 0x17	; 23
 7fc:	81 e0       	ldi	r24, 0x01	; 1
 7fe:	90 e0       	ldi	r25, 0x00	; 0
 800:	02 c0       	rjmp	.+4      	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 802:	88 0f       	add	r24, r24
 804:	99 1f       	adc	r25, r25
 806:	6a 95       	dec	r22
 808:	e2 f7       	brpl	.-8      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 80a:	80 95       	com	r24
 80c:	82 23       	and	r24, r18
 80e:	87 bb       	out	0x17, r24	; 23
 810:	08 95       	ret
 812:	24 b3       	in	r18, 0x14	; 20
 814:	81 e0       	ldi	r24, 0x01	; 1
 816:	90 e0       	ldi	r25, 0x00	; 0
 818:	02 c0       	rjmp	.+4      	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 81a:	88 0f       	add	r24, r24
 81c:	99 1f       	adc	r25, r25
 81e:	6a 95       	dec	r22
 820:	e2 f7       	brpl	.-8      	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 822:	80 95       	com	r24
 824:	82 23       	and	r24, r18
 826:	84 bb       	out	0x14, r24	; 20
 828:	08 95       	ret
 82a:	21 b3       	in	r18, 0x11	; 17
 82c:	81 e0       	ldi	r24, 0x01	; 1
 82e:	90 e0       	ldi	r25, 0x00	; 0
 830:	02 c0       	rjmp	.+4      	; 0x836 <__DATA_REGION_LENGTH__+0x36>
 832:	88 0f       	add	r24, r24
 834:	99 1f       	adc	r25, r25
 836:	6a 95       	dec	r22
 838:	e2 f7       	brpl	.-8      	; 0x832 <__DATA_REGION_LENGTH__+0x32>
 83a:	80 95       	com	r24
 83c:	82 23       	and	r24, r18
 83e:	81 bb       	out	0x11, r24	; 17
 840:	08 95       	ret

00000842 <DIO_void_Set_Pin_Value>:
 842:	41 30       	cpi	r20, 0x01	; 1
 844:	a1 f5       	brne	.+104    	; 0x8ae <__stack+0x4f>
 846:	81 30       	cpi	r24, 0x01	; 1
 848:	89 f0       	breq	.+34     	; 0x86c <__stack+0xd>
 84a:	28 f0       	brcs	.+10     	; 0x856 <DIO_void_Set_Pin_Value+0x14>
 84c:	82 30       	cpi	r24, 0x02	; 2
 84e:	c9 f0       	breq	.+50     	; 0x882 <__stack+0x23>
 850:	83 30       	cpi	r24, 0x03	; 3
 852:	11 f1       	breq	.+68     	; 0x898 <__stack+0x39>
 854:	08 95       	ret
 856:	2b b3       	in	r18, 0x1b	; 27
 858:	81 e0       	ldi	r24, 0x01	; 1
 85a:	90 e0       	ldi	r25, 0x00	; 0
 85c:	02 c0       	rjmp	.+4      	; 0x862 <__stack+0x3>
 85e:	88 0f       	add	r24, r24
 860:	99 1f       	adc	r25, r25
 862:	6a 95       	dec	r22
 864:	e2 f7       	brpl	.-8      	; 0x85e <DIO_void_Set_Pin_Value+0x1c>
 866:	82 2b       	or	r24, r18
 868:	8b bb       	out	0x1b, r24	; 27
 86a:	08 95       	ret
 86c:	28 b3       	in	r18, 0x18	; 24
 86e:	81 e0       	ldi	r24, 0x01	; 1
 870:	90 e0       	ldi	r25, 0x00	; 0
 872:	02 c0       	rjmp	.+4      	; 0x878 <__stack+0x19>
 874:	88 0f       	add	r24, r24
 876:	99 1f       	adc	r25, r25
 878:	6a 95       	dec	r22
 87a:	e2 f7       	brpl	.-8      	; 0x874 <__stack+0x15>
 87c:	82 2b       	or	r24, r18
 87e:	88 bb       	out	0x18, r24	; 24
 880:	08 95       	ret
 882:	25 b3       	in	r18, 0x15	; 21
 884:	81 e0       	ldi	r24, 0x01	; 1
 886:	90 e0       	ldi	r25, 0x00	; 0
 888:	02 c0       	rjmp	.+4      	; 0x88e <__stack+0x2f>
 88a:	88 0f       	add	r24, r24
 88c:	99 1f       	adc	r25, r25
 88e:	6a 95       	dec	r22
 890:	e2 f7       	brpl	.-8      	; 0x88a <__stack+0x2b>
 892:	82 2b       	or	r24, r18
 894:	85 bb       	out	0x15, r24	; 21
 896:	08 95       	ret
 898:	22 b3       	in	r18, 0x12	; 18
 89a:	81 e0       	ldi	r24, 0x01	; 1
 89c:	90 e0       	ldi	r25, 0x00	; 0
 89e:	02 c0       	rjmp	.+4      	; 0x8a4 <__stack+0x45>
 8a0:	88 0f       	add	r24, r24
 8a2:	99 1f       	adc	r25, r25
 8a4:	6a 95       	dec	r22
 8a6:	e2 f7       	brpl	.-8      	; 0x8a0 <__stack+0x41>
 8a8:	82 2b       	or	r24, r18
 8aa:	82 bb       	out	0x12, r24	; 18
 8ac:	08 95       	ret
 8ae:	41 11       	cpse	r20, r1
 8b0:	37 c0       	rjmp	.+110    	; 0x920 <__stack+0xc1>
 8b2:	81 30       	cpi	r24, 0x01	; 1
 8b4:	91 f0       	breq	.+36     	; 0x8da <__stack+0x7b>
 8b6:	28 f0       	brcs	.+10     	; 0x8c2 <__stack+0x63>
 8b8:	82 30       	cpi	r24, 0x02	; 2
 8ba:	d9 f0       	breq	.+54     	; 0x8f2 <__stack+0x93>
 8bc:	83 30       	cpi	r24, 0x03	; 3
 8be:	29 f1       	breq	.+74     	; 0x90a <__stack+0xab>
 8c0:	08 95       	ret
 8c2:	2b b3       	in	r18, 0x1b	; 27
 8c4:	81 e0       	ldi	r24, 0x01	; 1
 8c6:	90 e0       	ldi	r25, 0x00	; 0
 8c8:	02 c0       	rjmp	.+4      	; 0x8ce <__stack+0x6f>
 8ca:	88 0f       	add	r24, r24
 8cc:	99 1f       	adc	r25, r25
 8ce:	6a 95       	dec	r22
 8d0:	e2 f7       	brpl	.-8      	; 0x8ca <__stack+0x6b>
 8d2:	80 95       	com	r24
 8d4:	82 23       	and	r24, r18
 8d6:	8b bb       	out	0x1b, r24	; 27
 8d8:	08 95       	ret
 8da:	28 b3       	in	r18, 0x18	; 24
 8dc:	81 e0       	ldi	r24, 0x01	; 1
 8de:	90 e0       	ldi	r25, 0x00	; 0
 8e0:	02 c0       	rjmp	.+4      	; 0x8e6 <__stack+0x87>
 8e2:	88 0f       	add	r24, r24
 8e4:	99 1f       	adc	r25, r25
 8e6:	6a 95       	dec	r22
 8e8:	e2 f7       	brpl	.-8      	; 0x8e2 <__stack+0x83>
 8ea:	80 95       	com	r24
 8ec:	82 23       	and	r24, r18
 8ee:	88 bb       	out	0x18, r24	; 24
 8f0:	08 95       	ret
 8f2:	25 b3       	in	r18, 0x15	; 21
 8f4:	81 e0       	ldi	r24, 0x01	; 1
 8f6:	90 e0       	ldi	r25, 0x00	; 0
 8f8:	02 c0       	rjmp	.+4      	; 0x8fe <__stack+0x9f>
 8fa:	88 0f       	add	r24, r24
 8fc:	99 1f       	adc	r25, r25
 8fe:	6a 95       	dec	r22
 900:	e2 f7       	brpl	.-8      	; 0x8fa <__stack+0x9b>
 902:	80 95       	com	r24
 904:	82 23       	and	r24, r18
 906:	85 bb       	out	0x15, r24	; 21
 908:	08 95       	ret
 90a:	22 b3       	in	r18, 0x12	; 18
 90c:	81 e0       	ldi	r24, 0x01	; 1
 90e:	90 e0       	ldi	r25, 0x00	; 0
 910:	02 c0       	rjmp	.+4      	; 0x916 <__stack+0xb7>
 912:	88 0f       	add	r24, r24
 914:	99 1f       	adc	r25, r25
 916:	6a 95       	dec	r22
 918:	e2 f7       	brpl	.-8      	; 0x912 <__stack+0xb3>
 91a:	80 95       	com	r24
 91c:	82 23       	and	r24, r18
 91e:	82 bb       	out	0x12, r24	; 18
 920:	08 95       	ret

00000922 <DIO_void_Set_Port_Direction>:

void DIO_void_Set_Port_Direction(uint8_t copy_u8_port, uint8_t copy_u8_port_direction)
{
	switch(copy_u8_port)
 922:	81 30       	cpi	r24, 0x01	; 1
 924:	41 f0       	breq	.+16     	; 0x936 <DIO_void_Set_Port_Direction+0x14>
 926:	28 f0       	brcs	.+10     	; 0x932 <DIO_void_Set_Port_Direction+0x10>
 928:	82 30       	cpi	r24, 0x02	; 2
 92a:	39 f0       	breq	.+14     	; 0x93a <DIO_void_Set_Port_Direction+0x18>
 92c:	83 30       	cpi	r24, 0x03	; 3
 92e:	39 f0       	breq	.+14     	; 0x93e <DIO_void_Set_Port_Direction+0x1c>
 930:	08 95       	ret
	{
		case PORTA_:
			DDRA_REG = copy_u8_port_direction;
 932:	6a bb       	out	0x1a, r22	; 26
		break;
 934:	08 95       	ret
		
		case PORTB_:
			DDRB_REG = copy_u8_port_direction;
 936:	67 bb       	out	0x17, r22	; 23
		break;
 938:	08 95       	ret
		
		case PORTC_:
			DDRC_REG = copy_u8_port_direction;
 93a:	64 bb       	out	0x14, r22	; 20
		break;
 93c:	08 95       	ret
		
		case PORTD_:
			DDRD_REG = copy_u8_port_direction;
 93e:	61 bb       	out	0x11, r22	; 17
 940:	08 95       	ret

00000942 <DIO_void_Set_Port_Value>:
	}
}
	
void DIO_void_Set_Port_Value(uint8_t copy_u8_port, uint8_t copy_u8_port_value)
{
	switch(copy_u8_port)
 942:	81 30       	cpi	r24, 0x01	; 1
 944:	41 f0       	breq	.+16     	; 0x956 <DIO_void_Set_Port_Value+0x14>
 946:	28 f0       	brcs	.+10     	; 0x952 <DIO_void_Set_Port_Value+0x10>
 948:	82 30       	cpi	r24, 0x02	; 2
 94a:	39 f0       	breq	.+14     	; 0x95a <DIO_void_Set_Port_Value+0x18>
 94c:	83 30       	cpi	r24, 0x03	; 3
 94e:	39 f0       	breq	.+14     	; 0x95e <DIO_void_Set_Port_Value+0x1c>
 950:	08 95       	ret
	{
		case PORTA_:
			PORTA_REG = copy_u8_port_value;
 952:	6b bb       	out	0x1b, r22	; 27
		break;
 954:	08 95       	ret
		
		case PORTB_:
			PORTB_REG = copy_u8_port_value;
 956:	68 bb       	out	0x18, r22	; 24
		break;
 958:	08 95       	ret
		
		case PORTC_:
			PORTC_REG = copy_u8_port_value;
 95a:	65 bb       	out	0x15, r22	; 21
		break;
 95c:	08 95       	ret
		
		case PORTD_:
			PORTD_REG = copy_u8_port_value;
 95e:	62 bb       	out	0x12, r22	; 18
 960:	08 95       	ret

00000962 <GIE_void_Enable>:
#include "GIE_Private.h"
#include "GIE_Interface.h"

void GIE_void_Enable()
{
	SET_BIT(SREG_REG, GLOBAL_INTERRUPT_ENABLE_b);
 962:	8f b7       	in	r24, 0x3f	; 63
 964:	80 68       	ori	r24, 0x80	; 128
 966:	8f bf       	out	0x3f, r24	; 63
 968:	08 95       	ret

0000096a <GIE_void_Disable>:
}

void GIE_void_Disable()
{
	SET_BIT(SREG_REG, GLOBAL_INTERRUPT_ENABLE_b);
 96a:	8f b7       	in	r24, 0x3f	; 63
 96c:	80 68       	ori	r24, 0x80	; 128
 96e:	8f bf       	out	0x3f, r24	; 63
 970:	08 95       	ret

00000972 <TIMER0_void_Init>:
	{
		case TIMER0_OUTPUT_COMPARE_MATCH_INTERRUPT:
		CLR_BIT(TIMSK_REG, OCIE0_b);
		break;
		case TIMER0_OVERFLOW_INTERRUPT:
		CLR_BIT(TIMSK_REG, TOIE0_b);
 972:	86 2b       	or	r24, r22
 974:	83 bf       	out	0x33, r24	; 51
 976:	08 95       	ret

00000978 <TIMER0_void_Set_Compare_Output_Mode>:
 978:	23 b7       	in	r18, 0x33	; 51
 97a:	30 e1       	ldi	r19, 0x10	; 16
 97c:	83 9f       	mul	r24, r19
 97e:	c0 01       	movw	r24, r0
 980:	11 24       	eor	r1, r1
 982:	82 2b       	or	r24, r18
 984:	83 bf       	out	0x33, r24	; 51
 986:	08 95       	ret

00000988 <TIMER0_void_Set_Counter_Value>:
	}
}

void TIMER0_void_Set_Counter_Value(uint8_t copy_u8_value)
{
	TCNT0_REG = copy_u8_value;
 988:	82 bf       	out	0x32, r24	; 50
 98a:	08 95       	ret

0000098c <TIMER0_void_Set_Top_Value>:
}

void TIMER0_void_Set_Top_Value(uint8_t copy_u8_value)
{
	OCR0_REG = copy_u8_value;	
 98c:	8c bf       	out	0x3c, r24	; 60
 98e:	08 95       	ret

00000990 <TIMER0_void_Stop>:
}

void TIMER0_void_Stop()
{
	TCCR0_REG &= 0b11111000;
 990:	83 b7       	in	r24, 0x33	; 51
 992:	88 7f       	andi	r24, 0xF8	; 248
 994:	83 bf       	out	0x33, r24	; 51
 996:	08 95       	ret

00000998 <TIMER1_void_Init>:
	SET_BIT(TCCR1B_REG, ICNC1_b);
}

void TIMER1_void_Noise_Canceler_Disable()
{
	CLR_BIT(TCCR1B_REG, ICNC1_b);
 998:	1f bc       	out	0x2f, r1	; 47
 99a:	1e bc       	out	0x2e, r1	; 46
 99c:	9e b5       	in	r25, 0x2e	; 46
 99e:	26 2f       	mov	r18, r22
 9a0:	26 95       	lsr	r18
 9a2:	26 95       	lsr	r18
 9a4:	30 e0       	ldi	r19, 0x00	; 0
 9a6:	22 0f       	add	r18, r18
 9a8:	33 1f       	adc	r19, r19
 9aa:	22 0f       	add	r18, r18
 9ac:	33 1f       	adc	r19, r19
 9ae:	22 0f       	add	r18, r18
 9b0:	33 1f       	adc	r19, r19
 9b2:	82 2b       	or	r24, r18
 9b4:	89 2b       	or	r24, r25
 9b6:	8e bd       	out	0x2e, r24	; 46
 9b8:	8f b5       	in	r24, 0x2f	; 47
 9ba:	63 70       	andi	r22, 0x03	; 3
 9bc:	68 2b       	or	r22, r24
 9be:	6f bd       	out	0x2f, r22	; 47
 9c0:	08 95       	ret

000009c2 <TIMER1_void_Interrupt_Enable>:
 9c2:	81 30       	cpi	r24, 0x01	; 1
 9c4:	51 f0       	breq	.+20     	; 0x9da <TIMER1_void_Interrupt_Enable+0x18>
 9c6:	28 f0       	brcs	.+10     	; 0x9d2 <TIMER1_void_Interrupt_Enable+0x10>
 9c8:	82 30       	cpi	r24, 0x02	; 2
 9ca:	59 f0       	breq	.+22     	; 0x9e2 <TIMER1_void_Interrupt_Enable+0x20>
 9cc:	83 30       	cpi	r24, 0x03	; 3
 9ce:	69 f0       	breq	.+26     	; 0x9ea <TIMER1_void_Interrupt_Enable+0x28>
 9d0:	08 95       	ret
 9d2:	89 b7       	in	r24, 0x39	; 57
 9d4:	80 62       	ori	r24, 0x20	; 32
 9d6:	89 bf       	out	0x39, r24	; 57
 9d8:	08 95       	ret
 9da:	89 b7       	in	r24, 0x39	; 57
 9dc:	80 61       	ori	r24, 0x10	; 16
 9de:	89 bf       	out	0x39, r24	; 57
 9e0:	08 95       	ret
 9e2:	89 b7       	in	r24, 0x39	; 57
 9e4:	88 60       	ori	r24, 0x08	; 8
 9e6:	89 bf       	out	0x39, r24	; 57
 9e8:	08 95       	ret
 9ea:	89 b7       	in	r24, 0x39	; 57
 9ec:	84 60       	ori	r24, 0x04	; 4
 9ee:	89 bf       	out	0x39, r24	; 57
 9f0:	08 95       	ret

000009f2 <TIMER1_void_ICU_Edge_Select>:
}

void TIMER1_void_ICU_Edge_Select(uint8_t copy_u8_edge)
{
	switch(copy_u8_edge)
 9f2:	88 23       	and	r24, r24
 9f4:	31 f0       	breq	.+12     	; 0xa02 <TIMER1_void_ICU_Edge_Select+0x10>
 9f6:	81 30       	cpi	r24, 0x01	; 1
 9f8:	39 f4       	brne	.+14     	; 0xa08 <TIMER1_void_ICU_Edge_Select+0x16>
	{
		case RISING_EDGE:
			SET_BIT(TCCR1B_REG, ICES1_b);
 9fa:	8e b5       	in	r24, 0x2e	; 46
 9fc:	80 64       	ori	r24, 0x40	; 64
 9fe:	8e bd       	out	0x2e, r24	; 46
		break;
 a00:	08 95       	ret
		
		case FALLING_EDGE:
			CLR_BIT(TCCR1B_REG, ICES1_b);
 a02:	8e b5       	in	r24, 0x2e	; 46
 a04:	8f 7b       	andi	r24, 0xBF	; 191
 a06:	8e bd       	out	0x2e, r24	; 46
 a08:	08 95       	ret

00000a0a <TIMER1_void_Set_Counter_Value>:
	}
}

void TIMER1_void_Set_Counter_Value(uint16_t copy_u16_value)
{
	TCNT1H_REG = copy_u16_value >> 8;
 a0a:	9d bd       	out	0x2d, r25	; 45
	TCNT1L_REG = copy_u16_value;
 a0c:	8c bd       	out	0x2c, r24	; 44
 a0e:	08 95       	ret

00000a10 <TIMER1_u16_Get_ICR1>:
}

uint16_t TIMER1_u16_Get_ICR1()
{
	uint16_t loc_u16_value = ICR1L_REG;
 a10:	26 b5       	in	r18, 0x26	; 38
	return loc_u16_value |= ICR1H_REG << 8;
 a12:	87 b5       	in	r24, 0x27	; 39
 a14:	90 e0       	ldi	r25, 0x00	; 0
 a16:	98 2f       	mov	r25, r24
 a18:	88 27       	eor	r24, r24
}
 a1a:	82 2b       	or	r24, r18
 a1c:	08 95       	ret

00000a1e <TIMER1_void_Stop>:

void TIMER1_void_Stop()
{
	TCCR1B_REG &= 0b11111000;
 a1e:	8e b5       	in	r24, 0x2e	; 46
 a20:	88 7f       	andi	r24, 0xF8	; 248
 a22:	8e bd       	out	0x2e, r24	; 46
 a24:	08 95       	ret

00000a26 <__subsf3>:
 a26:	50 58       	subi	r21, 0x80	; 128

00000a28 <__addsf3>:
 a28:	bb 27       	eor	r27, r27
 a2a:	aa 27       	eor	r26, r26
 a2c:	0e 94 2b 05 	call	0xa56	; 0xa56 <__addsf3x>
 a30:	0c 94 a5 06 	jmp	0xd4a	; 0xd4a <__fp_round>
 a34:	0e 94 97 06 	call	0xd2e	; 0xd2e <__fp_pscA>
 a38:	38 f0       	brcs	.+14     	; 0xa48 <__addsf3+0x20>
 a3a:	0e 94 9e 06 	call	0xd3c	; 0xd3c <__fp_pscB>
 a3e:	20 f0       	brcs	.+8      	; 0xa48 <__addsf3+0x20>
 a40:	39 f4       	brne	.+14     	; 0xa50 <__addsf3+0x28>
 a42:	9f 3f       	cpi	r25, 0xFF	; 255
 a44:	19 f4       	brne	.+6      	; 0xa4c <__addsf3+0x24>
 a46:	26 f4       	brtc	.+8      	; 0xa50 <__addsf3+0x28>
 a48:	0c 94 94 06 	jmp	0xd28	; 0xd28 <__fp_nan>
 a4c:	0e f4       	brtc	.+2      	; 0xa50 <__addsf3+0x28>
 a4e:	e0 95       	com	r30
 a50:	e7 fb       	bst	r30, 7
 a52:	0c 94 8e 06 	jmp	0xd1c	; 0xd1c <__fp_inf>

00000a56 <__addsf3x>:
 a56:	e9 2f       	mov	r30, r25
 a58:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fp_split3>
 a5c:	58 f3       	brcs	.-42     	; 0xa34 <__addsf3+0xc>
 a5e:	ba 17       	cp	r27, r26
 a60:	62 07       	cpc	r22, r18
 a62:	73 07       	cpc	r23, r19
 a64:	84 07       	cpc	r24, r20
 a66:	95 07       	cpc	r25, r21
 a68:	20 f0       	brcs	.+8      	; 0xa72 <__addsf3x+0x1c>
 a6a:	79 f4       	brne	.+30     	; 0xa8a <__addsf3x+0x34>
 a6c:	a6 f5       	brtc	.+104    	; 0xad6 <__addsf3x+0x80>
 a6e:	0c 94 d8 06 	jmp	0xdb0	; 0xdb0 <__fp_zero>
 a72:	0e f4       	brtc	.+2      	; 0xa76 <__addsf3x+0x20>
 a74:	e0 95       	com	r30
 a76:	0b 2e       	mov	r0, r27
 a78:	ba 2f       	mov	r27, r26
 a7a:	a0 2d       	mov	r26, r0
 a7c:	0b 01       	movw	r0, r22
 a7e:	b9 01       	movw	r22, r18
 a80:	90 01       	movw	r18, r0
 a82:	0c 01       	movw	r0, r24
 a84:	ca 01       	movw	r24, r20
 a86:	a0 01       	movw	r20, r0
 a88:	11 24       	eor	r1, r1
 a8a:	ff 27       	eor	r31, r31
 a8c:	59 1b       	sub	r21, r25
 a8e:	99 f0       	breq	.+38     	; 0xab6 <__addsf3x+0x60>
 a90:	59 3f       	cpi	r21, 0xF9	; 249
 a92:	50 f4       	brcc	.+20     	; 0xaa8 <__addsf3x+0x52>
 a94:	50 3e       	cpi	r21, 0xE0	; 224
 a96:	68 f1       	brcs	.+90     	; 0xaf2 <__addsf3x+0x9c>
 a98:	1a 16       	cp	r1, r26
 a9a:	f0 40       	sbci	r31, 0x00	; 0
 a9c:	a2 2f       	mov	r26, r18
 a9e:	23 2f       	mov	r18, r19
 aa0:	34 2f       	mov	r19, r20
 aa2:	44 27       	eor	r20, r20
 aa4:	58 5f       	subi	r21, 0xF8	; 248
 aa6:	f3 cf       	rjmp	.-26     	; 0xa8e <__addsf3x+0x38>
 aa8:	46 95       	lsr	r20
 aaa:	37 95       	ror	r19
 aac:	27 95       	ror	r18
 aae:	a7 95       	ror	r26
 ab0:	f0 40       	sbci	r31, 0x00	; 0
 ab2:	53 95       	inc	r21
 ab4:	c9 f7       	brne	.-14     	; 0xaa8 <__addsf3x+0x52>
 ab6:	7e f4       	brtc	.+30     	; 0xad6 <__addsf3x+0x80>
 ab8:	1f 16       	cp	r1, r31
 aba:	ba 0b       	sbc	r27, r26
 abc:	62 0b       	sbc	r22, r18
 abe:	73 0b       	sbc	r23, r19
 ac0:	84 0b       	sbc	r24, r20
 ac2:	ba f0       	brmi	.+46     	; 0xaf2 <__addsf3x+0x9c>
 ac4:	91 50       	subi	r25, 0x01	; 1
 ac6:	a1 f0       	breq	.+40     	; 0xaf0 <__addsf3x+0x9a>
 ac8:	ff 0f       	add	r31, r31
 aca:	bb 1f       	adc	r27, r27
 acc:	66 1f       	adc	r22, r22
 ace:	77 1f       	adc	r23, r23
 ad0:	88 1f       	adc	r24, r24
 ad2:	c2 f7       	brpl	.-16     	; 0xac4 <__addsf3x+0x6e>
 ad4:	0e c0       	rjmp	.+28     	; 0xaf2 <__addsf3x+0x9c>
 ad6:	ba 0f       	add	r27, r26
 ad8:	62 1f       	adc	r22, r18
 ada:	73 1f       	adc	r23, r19
 adc:	84 1f       	adc	r24, r20
 ade:	48 f4       	brcc	.+18     	; 0xaf2 <__addsf3x+0x9c>
 ae0:	87 95       	ror	r24
 ae2:	77 95       	ror	r23
 ae4:	67 95       	ror	r22
 ae6:	b7 95       	ror	r27
 ae8:	f7 95       	ror	r31
 aea:	9e 3f       	cpi	r25, 0xFE	; 254
 aec:	08 f0       	brcs	.+2      	; 0xaf0 <__addsf3x+0x9a>
 aee:	b0 cf       	rjmp	.-160    	; 0xa50 <__addsf3+0x28>
 af0:	93 95       	inc	r25
 af2:	88 0f       	add	r24, r24
 af4:	08 f0       	brcs	.+2      	; 0xaf8 <__addsf3x+0xa2>
 af6:	99 27       	eor	r25, r25
 af8:	ee 0f       	add	r30, r30
 afa:	97 95       	ror	r25
 afc:	87 95       	ror	r24
 afe:	08 95       	ret

00000b00 <__cmpsf2>:
 b00:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <__fp_cmp>
 b04:	08 f4       	brcc	.+2      	; 0xb08 <__cmpsf2+0x8>
 b06:	81 e0       	ldi	r24, 0x01	; 1
 b08:	08 95       	ret

00000b0a <__divsf3>:
 b0a:	0e 94 99 05 	call	0xb32	; 0xb32 <__divsf3x>
 b0e:	0c 94 a5 06 	jmp	0xd4a	; 0xd4a <__fp_round>
 b12:	0e 94 9e 06 	call	0xd3c	; 0xd3c <__fp_pscB>
 b16:	58 f0       	brcs	.+22     	; 0xb2e <__divsf3+0x24>
 b18:	0e 94 97 06 	call	0xd2e	; 0xd2e <__fp_pscA>
 b1c:	40 f0       	brcs	.+16     	; 0xb2e <__divsf3+0x24>
 b1e:	29 f4       	brne	.+10     	; 0xb2a <__divsf3+0x20>
 b20:	5f 3f       	cpi	r21, 0xFF	; 255
 b22:	29 f0       	breq	.+10     	; 0xb2e <__divsf3+0x24>
 b24:	0c 94 8e 06 	jmp	0xd1c	; 0xd1c <__fp_inf>
 b28:	51 11       	cpse	r21, r1
 b2a:	0c 94 d9 06 	jmp	0xdb2	; 0xdb2 <__fp_szero>
 b2e:	0c 94 94 06 	jmp	0xd28	; 0xd28 <__fp_nan>

00000b32 <__divsf3x>:
 b32:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fp_split3>
 b36:	68 f3       	brcs	.-38     	; 0xb12 <__divsf3+0x8>

00000b38 <__divsf3_pse>:
 b38:	99 23       	and	r25, r25
 b3a:	b1 f3       	breq	.-20     	; 0xb28 <__divsf3+0x1e>
 b3c:	55 23       	and	r21, r21
 b3e:	91 f3       	breq	.-28     	; 0xb24 <__divsf3+0x1a>
 b40:	95 1b       	sub	r25, r21
 b42:	55 0b       	sbc	r21, r21
 b44:	bb 27       	eor	r27, r27
 b46:	aa 27       	eor	r26, r26
 b48:	62 17       	cp	r22, r18
 b4a:	73 07       	cpc	r23, r19
 b4c:	84 07       	cpc	r24, r20
 b4e:	38 f0       	brcs	.+14     	; 0xb5e <__divsf3_pse+0x26>
 b50:	9f 5f       	subi	r25, 0xFF	; 255
 b52:	5f 4f       	sbci	r21, 0xFF	; 255
 b54:	22 0f       	add	r18, r18
 b56:	33 1f       	adc	r19, r19
 b58:	44 1f       	adc	r20, r20
 b5a:	aa 1f       	adc	r26, r26
 b5c:	a9 f3       	breq	.-22     	; 0xb48 <__divsf3_pse+0x10>
 b5e:	35 d0       	rcall	.+106    	; 0xbca <__divsf3_pse+0x92>
 b60:	0e 2e       	mov	r0, r30
 b62:	3a f0       	brmi	.+14     	; 0xb72 <__divsf3_pse+0x3a>
 b64:	e0 e8       	ldi	r30, 0x80	; 128
 b66:	32 d0       	rcall	.+100    	; 0xbcc <__divsf3_pse+0x94>
 b68:	91 50       	subi	r25, 0x01	; 1
 b6a:	50 40       	sbci	r21, 0x00	; 0
 b6c:	e6 95       	lsr	r30
 b6e:	00 1c       	adc	r0, r0
 b70:	ca f7       	brpl	.-14     	; 0xb64 <__divsf3_pse+0x2c>
 b72:	2b d0       	rcall	.+86     	; 0xbca <__divsf3_pse+0x92>
 b74:	fe 2f       	mov	r31, r30
 b76:	29 d0       	rcall	.+82     	; 0xbca <__divsf3_pse+0x92>
 b78:	66 0f       	add	r22, r22
 b7a:	77 1f       	adc	r23, r23
 b7c:	88 1f       	adc	r24, r24
 b7e:	bb 1f       	adc	r27, r27
 b80:	26 17       	cp	r18, r22
 b82:	37 07       	cpc	r19, r23
 b84:	48 07       	cpc	r20, r24
 b86:	ab 07       	cpc	r26, r27
 b88:	b0 e8       	ldi	r27, 0x80	; 128
 b8a:	09 f0       	breq	.+2      	; 0xb8e <__divsf3_pse+0x56>
 b8c:	bb 0b       	sbc	r27, r27
 b8e:	80 2d       	mov	r24, r0
 b90:	bf 01       	movw	r22, r30
 b92:	ff 27       	eor	r31, r31
 b94:	93 58       	subi	r25, 0x83	; 131
 b96:	5f 4f       	sbci	r21, 0xFF	; 255
 b98:	3a f0       	brmi	.+14     	; 0xba8 <__divsf3_pse+0x70>
 b9a:	9e 3f       	cpi	r25, 0xFE	; 254
 b9c:	51 05       	cpc	r21, r1
 b9e:	78 f0       	brcs	.+30     	; 0xbbe <__divsf3_pse+0x86>
 ba0:	0c 94 8e 06 	jmp	0xd1c	; 0xd1c <__fp_inf>
 ba4:	0c 94 d9 06 	jmp	0xdb2	; 0xdb2 <__fp_szero>
 ba8:	5f 3f       	cpi	r21, 0xFF	; 255
 baa:	e4 f3       	brlt	.-8      	; 0xba4 <__divsf3_pse+0x6c>
 bac:	98 3e       	cpi	r25, 0xE8	; 232
 bae:	d4 f3       	brlt	.-12     	; 0xba4 <__divsf3_pse+0x6c>
 bb0:	86 95       	lsr	r24
 bb2:	77 95       	ror	r23
 bb4:	67 95       	ror	r22
 bb6:	b7 95       	ror	r27
 bb8:	f7 95       	ror	r31
 bba:	9f 5f       	subi	r25, 0xFF	; 255
 bbc:	c9 f7       	brne	.-14     	; 0xbb0 <__divsf3_pse+0x78>
 bbe:	88 0f       	add	r24, r24
 bc0:	91 1d       	adc	r25, r1
 bc2:	96 95       	lsr	r25
 bc4:	87 95       	ror	r24
 bc6:	97 f9       	bld	r25, 7
 bc8:	08 95       	ret
 bca:	e1 e0       	ldi	r30, 0x01	; 1
 bcc:	66 0f       	add	r22, r22
 bce:	77 1f       	adc	r23, r23
 bd0:	88 1f       	adc	r24, r24
 bd2:	bb 1f       	adc	r27, r27
 bd4:	62 17       	cp	r22, r18
 bd6:	73 07       	cpc	r23, r19
 bd8:	84 07       	cpc	r24, r20
 bda:	ba 07       	cpc	r27, r26
 bdc:	20 f0       	brcs	.+8      	; 0xbe6 <__divsf3_pse+0xae>
 bde:	62 1b       	sub	r22, r18
 be0:	73 0b       	sbc	r23, r19
 be2:	84 0b       	sbc	r24, r20
 be4:	ba 0b       	sbc	r27, r26
 be6:	ee 1f       	adc	r30, r30
 be8:	88 f7       	brcc	.-30     	; 0xbcc <__divsf3_pse+0x94>
 bea:	e0 95       	com	r30
 bec:	08 95       	ret

00000bee <__fixsfsi>:
 bee:	0e 94 fe 05 	call	0xbfc	; 0xbfc <__fixunssfsi>
 bf2:	68 94       	set
 bf4:	b1 11       	cpse	r27, r1
 bf6:	0c 94 d9 06 	jmp	0xdb2	; 0xdb2 <__fp_szero>
 bfa:	08 95       	ret

00000bfc <__fixunssfsi>:
 bfc:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fp_splitA>
 c00:	88 f0       	brcs	.+34     	; 0xc24 <__fixunssfsi+0x28>
 c02:	9f 57       	subi	r25, 0x7F	; 127
 c04:	98 f0       	brcs	.+38     	; 0xc2c <__fixunssfsi+0x30>
 c06:	b9 2f       	mov	r27, r25
 c08:	99 27       	eor	r25, r25
 c0a:	b7 51       	subi	r27, 0x17	; 23
 c0c:	b0 f0       	brcs	.+44     	; 0xc3a <__fixunssfsi+0x3e>
 c0e:	e1 f0       	breq	.+56     	; 0xc48 <__fixunssfsi+0x4c>
 c10:	66 0f       	add	r22, r22
 c12:	77 1f       	adc	r23, r23
 c14:	88 1f       	adc	r24, r24
 c16:	99 1f       	adc	r25, r25
 c18:	1a f0       	brmi	.+6      	; 0xc20 <__fixunssfsi+0x24>
 c1a:	ba 95       	dec	r27
 c1c:	c9 f7       	brne	.-14     	; 0xc10 <__fixunssfsi+0x14>
 c1e:	14 c0       	rjmp	.+40     	; 0xc48 <__fixunssfsi+0x4c>
 c20:	b1 30       	cpi	r27, 0x01	; 1
 c22:	91 f0       	breq	.+36     	; 0xc48 <__fixunssfsi+0x4c>
 c24:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__fp_zero>
 c28:	b1 e0       	ldi	r27, 0x01	; 1
 c2a:	08 95       	ret
 c2c:	0c 94 d8 06 	jmp	0xdb0	; 0xdb0 <__fp_zero>
 c30:	67 2f       	mov	r22, r23
 c32:	78 2f       	mov	r23, r24
 c34:	88 27       	eor	r24, r24
 c36:	b8 5f       	subi	r27, 0xF8	; 248
 c38:	39 f0       	breq	.+14     	; 0xc48 <__fixunssfsi+0x4c>
 c3a:	b9 3f       	cpi	r27, 0xF9	; 249
 c3c:	cc f3       	brlt	.-14     	; 0xc30 <__fixunssfsi+0x34>
 c3e:	86 95       	lsr	r24
 c40:	77 95       	ror	r23
 c42:	67 95       	ror	r22
 c44:	b3 95       	inc	r27
 c46:	d9 f7       	brne	.-10     	; 0xc3e <__fixunssfsi+0x42>
 c48:	3e f4       	brtc	.+14     	; 0xc58 <__fixunssfsi+0x5c>
 c4a:	90 95       	com	r25
 c4c:	80 95       	com	r24
 c4e:	70 95       	com	r23
 c50:	61 95       	neg	r22
 c52:	7f 4f       	sbci	r23, 0xFF	; 255
 c54:	8f 4f       	sbci	r24, 0xFF	; 255
 c56:	9f 4f       	sbci	r25, 0xFF	; 255
 c58:	08 95       	ret

00000c5a <__floatunsisf>:
 c5a:	e8 94       	clt
 c5c:	09 c0       	rjmp	.+18     	; 0xc70 <__floatsisf+0x12>

00000c5e <__floatsisf>:
 c5e:	97 fb       	bst	r25, 7
 c60:	3e f4       	brtc	.+14     	; 0xc70 <__floatsisf+0x12>
 c62:	90 95       	com	r25
 c64:	80 95       	com	r24
 c66:	70 95       	com	r23
 c68:	61 95       	neg	r22
 c6a:	7f 4f       	sbci	r23, 0xFF	; 255
 c6c:	8f 4f       	sbci	r24, 0xFF	; 255
 c6e:	9f 4f       	sbci	r25, 0xFF	; 255
 c70:	99 23       	and	r25, r25
 c72:	a9 f0       	breq	.+42     	; 0xc9e <__floatsisf+0x40>
 c74:	f9 2f       	mov	r31, r25
 c76:	96 e9       	ldi	r25, 0x96	; 150
 c78:	bb 27       	eor	r27, r27
 c7a:	93 95       	inc	r25
 c7c:	f6 95       	lsr	r31
 c7e:	87 95       	ror	r24
 c80:	77 95       	ror	r23
 c82:	67 95       	ror	r22
 c84:	b7 95       	ror	r27
 c86:	f1 11       	cpse	r31, r1
 c88:	f8 cf       	rjmp	.-16     	; 0xc7a <__floatsisf+0x1c>
 c8a:	fa f4       	brpl	.+62     	; 0xcca <__floatsisf+0x6c>
 c8c:	bb 0f       	add	r27, r27
 c8e:	11 f4       	brne	.+4      	; 0xc94 <__floatsisf+0x36>
 c90:	60 ff       	sbrs	r22, 0
 c92:	1b c0       	rjmp	.+54     	; 0xcca <__floatsisf+0x6c>
 c94:	6f 5f       	subi	r22, 0xFF	; 255
 c96:	7f 4f       	sbci	r23, 0xFF	; 255
 c98:	8f 4f       	sbci	r24, 0xFF	; 255
 c9a:	9f 4f       	sbci	r25, 0xFF	; 255
 c9c:	16 c0       	rjmp	.+44     	; 0xcca <__floatsisf+0x6c>
 c9e:	88 23       	and	r24, r24
 ca0:	11 f0       	breq	.+4      	; 0xca6 <__floatsisf+0x48>
 ca2:	96 e9       	ldi	r25, 0x96	; 150
 ca4:	11 c0       	rjmp	.+34     	; 0xcc8 <__floatsisf+0x6a>
 ca6:	77 23       	and	r23, r23
 ca8:	21 f0       	breq	.+8      	; 0xcb2 <__floatsisf+0x54>
 caa:	9e e8       	ldi	r25, 0x8E	; 142
 cac:	87 2f       	mov	r24, r23
 cae:	76 2f       	mov	r23, r22
 cb0:	05 c0       	rjmp	.+10     	; 0xcbc <__floatsisf+0x5e>
 cb2:	66 23       	and	r22, r22
 cb4:	71 f0       	breq	.+28     	; 0xcd2 <__floatsisf+0x74>
 cb6:	96 e8       	ldi	r25, 0x86	; 134
 cb8:	86 2f       	mov	r24, r22
 cba:	70 e0       	ldi	r23, 0x00	; 0
 cbc:	60 e0       	ldi	r22, 0x00	; 0
 cbe:	2a f0       	brmi	.+10     	; 0xcca <__floatsisf+0x6c>
 cc0:	9a 95       	dec	r25
 cc2:	66 0f       	add	r22, r22
 cc4:	77 1f       	adc	r23, r23
 cc6:	88 1f       	adc	r24, r24
 cc8:	da f7       	brpl	.-10     	; 0xcc0 <__floatsisf+0x62>
 cca:	88 0f       	add	r24, r24
 ccc:	96 95       	lsr	r25
 cce:	87 95       	ror	r24
 cd0:	97 f9       	bld	r25, 7
 cd2:	08 95       	ret

00000cd4 <__fp_cmp>:
 cd4:	99 0f       	add	r25, r25
 cd6:	00 08       	sbc	r0, r0
 cd8:	55 0f       	add	r21, r21
 cda:	aa 0b       	sbc	r26, r26
 cdc:	e0 e8       	ldi	r30, 0x80	; 128
 cde:	fe ef       	ldi	r31, 0xFE	; 254
 ce0:	16 16       	cp	r1, r22
 ce2:	17 06       	cpc	r1, r23
 ce4:	e8 07       	cpc	r30, r24
 ce6:	f9 07       	cpc	r31, r25
 ce8:	c0 f0       	brcs	.+48     	; 0xd1a <__fp_cmp+0x46>
 cea:	12 16       	cp	r1, r18
 cec:	13 06       	cpc	r1, r19
 cee:	e4 07       	cpc	r30, r20
 cf0:	f5 07       	cpc	r31, r21
 cf2:	98 f0       	brcs	.+38     	; 0xd1a <__fp_cmp+0x46>
 cf4:	62 1b       	sub	r22, r18
 cf6:	73 0b       	sbc	r23, r19
 cf8:	84 0b       	sbc	r24, r20
 cfa:	95 0b       	sbc	r25, r21
 cfc:	39 f4       	brne	.+14     	; 0xd0c <__fp_cmp+0x38>
 cfe:	0a 26       	eor	r0, r26
 d00:	61 f0       	breq	.+24     	; 0xd1a <__fp_cmp+0x46>
 d02:	23 2b       	or	r18, r19
 d04:	24 2b       	or	r18, r20
 d06:	25 2b       	or	r18, r21
 d08:	21 f4       	brne	.+8      	; 0xd12 <__fp_cmp+0x3e>
 d0a:	08 95       	ret
 d0c:	0a 26       	eor	r0, r26
 d0e:	09 f4       	brne	.+2      	; 0xd12 <__fp_cmp+0x3e>
 d10:	a1 40       	sbci	r26, 0x01	; 1
 d12:	a6 95       	lsr	r26
 d14:	8f ef       	ldi	r24, 0xFF	; 255
 d16:	81 1d       	adc	r24, r1
 d18:	81 1d       	adc	r24, r1
 d1a:	08 95       	ret

00000d1c <__fp_inf>:
 d1c:	97 f9       	bld	r25, 7
 d1e:	9f 67       	ori	r25, 0x7F	; 127
 d20:	80 e8       	ldi	r24, 0x80	; 128
 d22:	70 e0       	ldi	r23, 0x00	; 0
 d24:	60 e0       	ldi	r22, 0x00	; 0
 d26:	08 95       	ret

00000d28 <__fp_nan>:
 d28:	9f ef       	ldi	r25, 0xFF	; 255
 d2a:	80 ec       	ldi	r24, 0xC0	; 192
 d2c:	08 95       	ret

00000d2e <__fp_pscA>:
 d2e:	00 24       	eor	r0, r0
 d30:	0a 94       	dec	r0
 d32:	16 16       	cp	r1, r22
 d34:	17 06       	cpc	r1, r23
 d36:	18 06       	cpc	r1, r24
 d38:	09 06       	cpc	r0, r25
 d3a:	08 95       	ret

00000d3c <__fp_pscB>:
 d3c:	00 24       	eor	r0, r0
 d3e:	0a 94       	dec	r0
 d40:	12 16       	cp	r1, r18
 d42:	13 06       	cpc	r1, r19
 d44:	14 06       	cpc	r1, r20
 d46:	05 06       	cpc	r0, r21
 d48:	08 95       	ret

00000d4a <__fp_round>:
 d4a:	09 2e       	mov	r0, r25
 d4c:	03 94       	inc	r0
 d4e:	00 0c       	add	r0, r0
 d50:	11 f4       	brne	.+4      	; 0xd56 <__fp_round+0xc>
 d52:	88 23       	and	r24, r24
 d54:	52 f0       	brmi	.+20     	; 0xd6a <__fp_round+0x20>
 d56:	bb 0f       	add	r27, r27
 d58:	40 f4       	brcc	.+16     	; 0xd6a <__fp_round+0x20>
 d5a:	bf 2b       	or	r27, r31
 d5c:	11 f4       	brne	.+4      	; 0xd62 <__fp_round+0x18>
 d5e:	60 ff       	sbrs	r22, 0
 d60:	04 c0       	rjmp	.+8      	; 0xd6a <__fp_round+0x20>
 d62:	6f 5f       	subi	r22, 0xFF	; 255
 d64:	7f 4f       	sbci	r23, 0xFF	; 255
 d66:	8f 4f       	sbci	r24, 0xFF	; 255
 d68:	9f 4f       	sbci	r25, 0xFF	; 255
 d6a:	08 95       	ret

00000d6c <__fp_split3>:
 d6c:	57 fd       	sbrc	r21, 7
 d6e:	90 58       	subi	r25, 0x80	; 128
 d70:	44 0f       	add	r20, r20
 d72:	55 1f       	adc	r21, r21
 d74:	59 f0       	breq	.+22     	; 0xd8c <__fp_splitA+0x10>
 d76:	5f 3f       	cpi	r21, 0xFF	; 255
 d78:	71 f0       	breq	.+28     	; 0xd96 <__fp_splitA+0x1a>
 d7a:	47 95       	ror	r20

00000d7c <__fp_splitA>:
 d7c:	88 0f       	add	r24, r24
 d7e:	97 fb       	bst	r25, 7
 d80:	99 1f       	adc	r25, r25
 d82:	61 f0       	breq	.+24     	; 0xd9c <__fp_splitA+0x20>
 d84:	9f 3f       	cpi	r25, 0xFF	; 255
 d86:	79 f0       	breq	.+30     	; 0xda6 <__fp_splitA+0x2a>
 d88:	87 95       	ror	r24
 d8a:	08 95       	ret
 d8c:	12 16       	cp	r1, r18
 d8e:	13 06       	cpc	r1, r19
 d90:	14 06       	cpc	r1, r20
 d92:	55 1f       	adc	r21, r21
 d94:	f2 cf       	rjmp	.-28     	; 0xd7a <__fp_split3+0xe>
 d96:	46 95       	lsr	r20
 d98:	f1 df       	rcall	.-30     	; 0xd7c <__fp_splitA>
 d9a:	08 c0       	rjmp	.+16     	; 0xdac <__fp_splitA+0x30>
 d9c:	16 16       	cp	r1, r22
 d9e:	17 06       	cpc	r1, r23
 da0:	18 06       	cpc	r1, r24
 da2:	99 1f       	adc	r25, r25
 da4:	f1 cf       	rjmp	.-30     	; 0xd88 <__fp_splitA+0xc>
 da6:	86 95       	lsr	r24
 da8:	71 05       	cpc	r23, r1
 daa:	61 05       	cpc	r22, r1
 dac:	08 94       	sec
 dae:	08 95       	ret

00000db0 <__fp_zero>:
 db0:	e8 94       	clt

00000db2 <__fp_szero>:
 db2:	bb 27       	eor	r27, r27
 db4:	66 27       	eor	r22, r22
 db6:	77 27       	eor	r23, r23
 db8:	cb 01       	movw	r24, r22
 dba:	97 f9       	bld	r25, 7
 dbc:	08 95       	ret

00000dbe <__mulsf3>:
 dbe:	0e 94 f2 06 	call	0xde4	; 0xde4 <__mulsf3x>
 dc2:	0c 94 a5 06 	jmp	0xd4a	; 0xd4a <__fp_round>
 dc6:	0e 94 97 06 	call	0xd2e	; 0xd2e <__fp_pscA>
 dca:	38 f0       	brcs	.+14     	; 0xdda <__mulsf3+0x1c>
 dcc:	0e 94 9e 06 	call	0xd3c	; 0xd3c <__fp_pscB>
 dd0:	20 f0       	brcs	.+8      	; 0xdda <__mulsf3+0x1c>
 dd2:	95 23       	and	r25, r21
 dd4:	11 f0       	breq	.+4      	; 0xdda <__mulsf3+0x1c>
 dd6:	0c 94 8e 06 	jmp	0xd1c	; 0xd1c <__fp_inf>
 dda:	0c 94 94 06 	jmp	0xd28	; 0xd28 <__fp_nan>
 dde:	11 24       	eor	r1, r1
 de0:	0c 94 d9 06 	jmp	0xdb2	; 0xdb2 <__fp_szero>

00000de4 <__mulsf3x>:
 de4:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fp_split3>
 de8:	70 f3       	brcs	.-36     	; 0xdc6 <__mulsf3+0x8>

00000dea <__mulsf3_pse>:
 dea:	95 9f       	mul	r25, r21
 dec:	c1 f3       	breq	.-16     	; 0xdde <__mulsf3+0x20>
 dee:	95 0f       	add	r25, r21
 df0:	50 e0       	ldi	r21, 0x00	; 0
 df2:	55 1f       	adc	r21, r21
 df4:	62 9f       	mul	r22, r18
 df6:	f0 01       	movw	r30, r0
 df8:	72 9f       	mul	r23, r18
 dfa:	bb 27       	eor	r27, r27
 dfc:	f0 0d       	add	r31, r0
 dfe:	b1 1d       	adc	r27, r1
 e00:	63 9f       	mul	r22, r19
 e02:	aa 27       	eor	r26, r26
 e04:	f0 0d       	add	r31, r0
 e06:	b1 1d       	adc	r27, r1
 e08:	aa 1f       	adc	r26, r26
 e0a:	64 9f       	mul	r22, r20
 e0c:	66 27       	eor	r22, r22
 e0e:	b0 0d       	add	r27, r0
 e10:	a1 1d       	adc	r26, r1
 e12:	66 1f       	adc	r22, r22
 e14:	82 9f       	mul	r24, r18
 e16:	22 27       	eor	r18, r18
 e18:	b0 0d       	add	r27, r0
 e1a:	a1 1d       	adc	r26, r1
 e1c:	62 1f       	adc	r22, r18
 e1e:	73 9f       	mul	r23, r19
 e20:	b0 0d       	add	r27, r0
 e22:	a1 1d       	adc	r26, r1
 e24:	62 1f       	adc	r22, r18
 e26:	83 9f       	mul	r24, r19
 e28:	a0 0d       	add	r26, r0
 e2a:	61 1d       	adc	r22, r1
 e2c:	22 1f       	adc	r18, r18
 e2e:	74 9f       	mul	r23, r20
 e30:	33 27       	eor	r19, r19
 e32:	a0 0d       	add	r26, r0
 e34:	61 1d       	adc	r22, r1
 e36:	23 1f       	adc	r18, r19
 e38:	84 9f       	mul	r24, r20
 e3a:	60 0d       	add	r22, r0
 e3c:	21 1d       	adc	r18, r1
 e3e:	82 2f       	mov	r24, r18
 e40:	76 2f       	mov	r23, r22
 e42:	6a 2f       	mov	r22, r26
 e44:	11 24       	eor	r1, r1
 e46:	9f 57       	subi	r25, 0x7F	; 127
 e48:	50 40       	sbci	r21, 0x00	; 0
 e4a:	9a f0       	brmi	.+38     	; 0xe72 <__mulsf3_pse+0x88>
 e4c:	f1 f0       	breq	.+60     	; 0xe8a <__mulsf3_pse+0xa0>
 e4e:	88 23       	and	r24, r24
 e50:	4a f0       	brmi	.+18     	; 0xe64 <__mulsf3_pse+0x7a>
 e52:	ee 0f       	add	r30, r30
 e54:	ff 1f       	adc	r31, r31
 e56:	bb 1f       	adc	r27, r27
 e58:	66 1f       	adc	r22, r22
 e5a:	77 1f       	adc	r23, r23
 e5c:	88 1f       	adc	r24, r24
 e5e:	91 50       	subi	r25, 0x01	; 1
 e60:	50 40       	sbci	r21, 0x00	; 0
 e62:	a9 f7       	brne	.-22     	; 0xe4e <__mulsf3_pse+0x64>
 e64:	9e 3f       	cpi	r25, 0xFE	; 254
 e66:	51 05       	cpc	r21, r1
 e68:	80 f0       	brcs	.+32     	; 0xe8a <__mulsf3_pse+0xa0>
 e6a:	0c 94 8e 06 	jmp	0xd1c	; 0xd1c <__fp_inf>
 e6e:	0c 94 d9 06 	jmp	0xdb2	; 0xdb2 <__fp_szero>
 e72:	5f 3f       	cpi	r21, 0xFF	; 255
 e74:	e4 f3       	brlt	.-8      	; 0xe6e <__mulsf3_pse+0x84>
 e76:	98 3e       	cpi	r25, 0xE8	; 232
 e78:	d4 f3       	brlt	.-12     	; 0xe6e <__mulsf3_pse+0x84>
 e7a:	86 95       	lsr	r24
 e7c:	77 95       	ror	r23
 e7e:	67 95       	ror	r22
 e80:	b7 95       	ror	r27
 e82:	f7 95       	ror	r31
 e84:	e7 95       	ror	r30
 e86:	9f 5f       	subi	r25, 0xFF	; 255
 e88:	c1 f7       	brne	.-16     	; 0xe7a <__mulsf3_pse+0x90>
 e8a:	fe 2b       	or	r31, r30
 e8c:	88 0f       	add	r24, r24
 e8e:	91 1d       	adc	r25, r1
 e90:	96 95       	lsr	r25
 e92:	87 95       	ror	r24
 e94:	97 f9       	bld	r25, 7
 e96:	08 95       	ret

00000e98 <__divmodsi4>:
 e98:	05 2e       	mov	r0, r21
 e9a:	97 fb       	bst	r25, 7
 e9c:	1e f4       	brtc	.+6      	; 0xea4 <__divmodsi4+0xc>
 e9e:	00 94       	com	r0
 ea0:	0e 94 63 07 	call	0xec6	; 0xec6 <__negsi2>
 ea4:	57 fd       	sbrc	r21, 7
 ea6:	07 d0       	rcall	.+14     	; 0xeb6 <__divmodsi4_neg2>
 ea8:	0e 94 6b 07 	call	0xed6	; 0xed6 <__udivmodsi4>
 eac:	07 fc       	sbrc	r0, 7
 eae:	03 d0       	rcall	.+6      	; 0xeb6 <__divmodsi4_neg2>
 eb0:	4e f4       	brtc	.+18     	; 0xec4 <__divmodsi4_exit>
 eb2:	0c 94 63 07 	jmp	0xec6	; 0xec6 <__negsi2>

00000eb6 <__divmodsi4_neg2>:
 eb6:	50 95       	com	r21
 eb8:	40 95       	com	r20
 eba:	30 95       	com	r19
 ebc:	21 95       	neg	r18
 ebe:	3f 4f       	sbci	r19, 0xFF	; 255
 ec0:	4f 4f       	sbci	r20, 0xFF	; 255
 ec2:	5f 4f       	sbci	r21, 0xFF	; 255

00000ec4 <__divmodsi4_exit>:
 ec4:	08 95       	ret

00000ec6 <__negsi2>:
 ec6:	90 95       	com	r25
 ec8:	80 95       	com	r24
 eca:	70 95       	com	r23
 ecc:	61 95       	neg	r22
 ece:	7f 4f       	sbci	r23, 0xFF	; 255
 ed0:	8f 4f       	sbci	r24, 0xFF	; 255
 ed2:	9f 4f       	sbci	r25, 0xFF	; 255
 ed4:	08 95       	ret

00000ed6 <__udivmodsi4>:
 ed6:	a1 e2       	ldi	r26, 0x21	; 33
 ed8:	1a 2e       	mov	r1, r26
 eda:	aa 1b       	sub	r26, r26
 edc:	bb 1b       	sub	r27, r27
 ede:	fd 01       	movw	r30, r26
 ee0:	0d c0       	rjmp	.+26     	; 0xefc <__udivmodsi4_ep>

00000ee2 <__udivmodsi4_loop>:
 ee2:	aa 1f       	adc	r26, r26
 ee4:	bb 1f       	adc	r27, r27
 ee6:	ee 1f       	adc	r30, r30
 ee8:	ff 1f       	adc	r31, r31
 eea:	a2 17       	cp	r26, r18
 eec:	b3 07       	cpc	r27, r19
 eee:	e4 07       	cpc	r30, r20
 ef0:	f5 07       	cpc	r31, r21
 ef2:	20 f0       	brcs	.+8      	; 0xefc <__udivmodsi4_ep>
 ef4:	a2 1b       	sub	r26, r18
 ef6:	b3 0b       	sbc	r27, r19
 ef8:	e4 0b       	sbc	r30, r20
 efa:	f5 0b       	sbc	r31, r21

00000efc <__udivmodsi4_ep>:
 efc:	66 1f       	adc	r22, r22
 efe:	77 1f       	adc	r23, r23
 f00:	88 1f       	adc	r24, r24
 f02:	99 1f       	adc	r25, r25
 f04:	1a 94       	dec	r1
 f06:	69 f7       	brne	.-38     	; 0xee2 <__udivmodsi4_loop>
 f08:	60 95       	com	r22
 f0a:	70 95       	com	r23
 f0c:	80 95       	com	r24
 f0e:	90 95       	com	r25
 f10:	9b 01       	movw	r18, r22
 f12:	ac 01       	movw	r20, r24
 f14:	bd 01       	movw	r22, r26
 f16:	cf 01       	movw	r24, r30
 f18:	08 95       	ret

00000f1a <_exit>:
 f1a:	f8 94       	cli

00000f1c <__stop_program>:
 f1c:	ff cf       	rjmp	.-2      	; 0xf1c <__stop_program>
